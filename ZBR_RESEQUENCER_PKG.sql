CREATE OR REPLACE PACKAGE ZBR_RESEQUENCER_PKG AS

FUNCTION ZEB_CST_CONV(F_DATE IN VARCHAR2,F_TP_NAME IN VARCHAR2)	RETURN VARCHAR2;
FUNCTION ZEB_GET_OWNER_ID(F_GID IN VARCHAR2,F_PID IN VARCHAR2) RETURN NUMBER;
PROCEDURE ZBR_RESEQUENCER_INSERT_RESEQ_MSG(MSG_VAL IN ZBR_RESEQUENCER_PKG_MSG_LIST,P_STATUS OUT VARCHAR2,P_MSG OUT VARCHAR2,
	P_GRP_CONSUMER_STATUS OUT VARCHAR2,P_OUT_VALUE OUT ZBR_RESEQUENCER_PKG_ATTRIBUTE_LIST);
PROCEDURE ZBR_RESEQUENCER_UPDATE_RESEQ_GRP(P_LAST_UPDATED_BY IN VARCHAR2,P_STATUS OUT VARCHAR2,P_MSG OUT VARCHAR2);
PROCEDURE ZBR_RESEQUENCER_GET_NEW_MSGS(P_MSG_CNT IN NUMBER,P_GRPID IN VARCHAR2,P_PROCESS_ID IN VARCHAR2,P_LAST_UPDATED_BY IN VARCHAR2,
	P_IN_VALUE IN ZBR_RESEQUENCER_PKG_ATTRIBUTE_LIST,P_MSG_ID OUT ZBR_RESEQUENCER_PKG_GET_MSG_LIST);
PROCEDURE ZBR_RESEQUENCER_GET_NEW_GRPS(P_GRP_CNT IN NUMBER,P_LAST_UPDATED_BY IN VARCHAR2,P_IN_VALUE IN ZBR_RESEQUENCER_PKG_ATTRIBUTE_LIST,
	P_RECORD OUT ZBR_RESEQUENCER_PKG_GET_GRP_LIST,P_GRP_AVL_CNT OUT NUMBER);
PROCEDURE ZBR_RESEQUENCER_UPDATE_STATUS(P_GRP_ID IN VARCHAR2,P_PROCESS_ID IN VARCHAR2,P_ID IN NUMBER,P_ERROR IN VARCHAR2,
	P_OIC_STATUS IN VARCHAR2,P_LAST_UPDATED_BY IN VARCHAR2,P_FLOW_ID IN VARCHAR2,P_IN_VALUE IN ZBR_RESEQUENCER_PKG_ATTRIBUTE_LIST,
	P_TAB_NAME IN VARCHAR2 DEFAULT NULL,P_PENDING_MSG_CNT OUT NUMBER ,P_STATUS OUT VARCHAR2,P_MSG OUT VARCHAR2,P_GRP_CONSUMER_STATUS OUT VARCHAR2,
	P_OUT_VALUE OUT ZBR_RESEQUENCER_PKG_ATTRIBUTE_LIST);
PROCEDURE ZBR_RESEQUENCER_TABLE_PURGE(p_status out varchar2,P_MSG OUT VARCHAR2,p_purge_days in number default 90,p_limit in number default 100);
PROCEDURE ZBR_RESEQENCER_VB_GET_GROUPS(P_GROUP_LIST OUT ZEB_RESEQUENCER_VB_GROUP_LIST,P_STATUS OUT VARCHAR2,P_MSG OUT VARCHAR2,
	P_ADDITIONAL_FILTER IN VARCHAR2 DEFAULT NULL);
PROCEDURE ZBR_RESEQENCER_VB_GET_MESSAGE(P_IN_VALUE IN ZBR_RESEQUENCER_PKG_ATTRIBUTE_REC,P_MESSAGE_LIST OUT ZEB_RESEQUENCER_VB_MESSAGE_LIST,P_STATUS OUT VARCHAR2,P_MSG OUT VARCHAR2);
PROCEDURE ZBR_RESEQUENCER_UPDATE_STATUS_JAVA(P_GRP_ID IN VARCHAR2,P_PROCESS_ID IN VARCHAR2,P_ID IN NUMBER,P_ERROR IN VARCHAR2,
	P_OIC_STATUS IN VARCHAR2,P_LAST_UPDATED_BY IN VARCHAR2,P_FLOW_ID IN VARCHAR2, P_TAB_NAME IN VARCHAR2 DEFAULT NULL,
	P_PENDING_MSG_CNT OUT NUMBER ,P_STATUS OUT VARCHAR2,P_MSG OUT VARCHAR2,P_GRP_CONSUMER_STATUS OUT VARCHAR2);
PROCEDURE ZBR_RESEQUENCER_UPDATE_STATUS_VB(P_ACTION IN VARCHAR2,P_RESUBMIT_CNT IN NUMBER DEFAULT 10,P_STATUS_VBCS IN VARCHAR2 DEFAULT '7',
	P_COMPONENT_DN VARCHAR2,P_GRP_LIST VARCHAR2,P_GROUP_LIST_VB OUT ZEB_RESEQUENCER_VB_GROUP_LIST,P_STATUS OUT VARCHAR2,P_MSG OUT VARCHAR2,
	P_GRP_CONSUMER_STATUS OUT VARCHAR2,P_ADDITIONAL_FILTER IN VARCHAR2 DEFAULT NULL);
PROCEDURE ZBR_RESEQENCER_VB_GET_PAYLOAD(P_IN_VALUE IN ZBR_RESEQUENCER_PKG_ATTRIBUTE_REC,P_MESSAGE_LIST OUT ZBR_RESEQUENCER_PKG_GET_MSG_LIST,
	P_STATUS OUT VARCHAR2,P_MSG OUT VARCHAR2);
PROCEDURE ZBR_RESEQENCER_VB_GET_CONTROL_TP_TBL(P_CONTROL_TBL OUT ZBR_RESEQUENCER_PKG_CONTROL_TBL_LIST,P_TP_TBL IN OUT ZBR_RESEQUENCER_PKG_TP_METADATA_LIST,
	P_STATUS OUT VARCHAR2,P_MSG OUT VARCHAR2,P_ACTION IN VARCHAR2 DEFAULT NULL);										
END ZBR_RESEQUENCER_PKG;
/
CREATE OR REPLACE PACKAGE BODY ZBR_RESEQUENCER_PKG AS

/*===================================================================================================================================
   The purpose of this code is to build Re-Sequencer Functionality. Procedures will receive input from OIC and load into tables. Procedures will also fetch 
   data from tables and gives back to OIC.   

    DEVELOPED BY:   ASHISH KUMAR    VERSION    1.0     DATE: 06/12/2018 0655 PM
	DEVELOPED BY:   ASHISH KUMAR    VERSION    2.0     DATE: 20/12/2018 0735 PM
	DEVELOPED BY:   ASHISH KUMAR    VERSION    3.0     DATE: 21/12/2018 0735 PM
	DEVELOPED BY:   ASHISH KUMAR    VERSION    4.0     DATE: 03/01/2019 0400 PM 	Implemented explicit Types to avoid Wrapper pkg
	DEVELOPED BY:   ASHISH KUMAR    VERSION    5.0     DATE: 09/01/2019 1253 PM 	Calling Update Grp proc Inside Get Grp proc	
	DEVELOPED BY:   ASHISH KUMAR    VERSION    6.0     DATE: 21/01/2019 0610 PM 	Added CreatedBy and LastUpdatedBy in Grp and Msg Tables.
	DEVELOPED BY:   ASHISH KUMAR    VERSION    7.0     DATE: 23/01/2019 0610 PM 	Added Changes suggested By Client Oracle Team.
	DEVELOPED BY:   ASHISH KUMAR    VERSION    7.1     DATE: 30/01/2019 0537 PM 	Added DB Time Zone Conversion while Data Insert and Date format Change.
	DEVELOPED BY:   ASHISH KUMAR    VERSION    7.2     DATE: 08/02/2019 0333 PM		Procedure RESEQ INSERT is fine tuned,Function GetOwnerId,ToCST added.
	DEVELOPED BY:   ASHISH KUMAR    VERSION    7.3     DATE: 12/02/2019 0628 PM		Additional I/P O/P parameter added to procedures.
    DEVELOPED BY:   ASHISH KUMAR    VERSION    7.4     DATE: 19/02/2019 0526 PM		Modified Procedure Update Status to handle Abort and Resubmit.
	DEVELOPED BY:   ASHISH KUMAR    VERSION    7.5     DATE: 22/02/2019 0230 PM		Added Procedure ZBR_RESEQENCER_VB_GET_GROUPS,ZBR_RESEQENCER_VB_GET_MESSAGE
	DEVELOPED BY:   ASHISH KUMAR    VERSION    7.6     DATE: 25/02/2019 0332 PM		Added Procedure ZBR_RESEQUENCER_UPDATE_STATUS_JAVA
	DEVELOPED BY:   ASHISH KUMAR    VERSION    7.7     DATE: 02/04/2019 0116 AM		Changed Update Group Logic to oldest date from Msg table,after the 1st Review with Anil.
	DEVELOPED BY:   ASHISH KUMAR    VERSION    7.8     DATE: 26/04/2019 0410 PM		Added procedure ZBR_RESEQUENCER_UPDATE_STATUS_VB and Added P_GRP_CONSUMER_STATUS OUT parameter in UPDATE_STATUS proc.
	DEVELOPED BY:   ASHISH KUMAR    VERSION    7.9     DATE: 03/05/2019 0630 PM		Added procedure ZBR_RESEQENCER_VB_GET_PAYLOAD and ZBR_RESEQENCER_VB_GET_CONTROL_TP_TBL
	DEVELOPED BY:   ASHISH KUMAR    VERSION    8.0     DATE: 09/05/2019 0400 PM		Added logic of checking In progress Process count and then manipulating Metadata Count, for get group proc. As per review comment by Anil.
	DEVELOPED BY:   ASHISH KUMAR    VERSION    8.1     DATE: 04/06/2019 0314 PM		Added ATTRIBUTE1 in GET_NEW_MSG proc.
	DEVELOPED BY:   ASHISH KUMAR    VERSION    8.2     DATE: 25/07/2019 0314 PM		Added SEARCH & MERGE in ZBR_RESEQUENCER_UPDATE_STATUS_VB procedure.				 			
=====================================================================================================================================*/

FUNCTION ZEB_CST_CONV(F_DATE IN VARCHAR2,F_TP_NAME IN VARCHAR2)
		RETURN VARCHAR2
		AS
		TP_TZ VARCHAR2(200);
	BEGIN
		SELECT TP_TIMEZONE INTO TP_TZ FROM ZEB_RESEQUENCER_TP_METADATA WHERE TP_NAME=F_TP_NAME;
		RETURN TO_CHAR(FROM_TZ(TO_TIMESTAMP(F_DATE,'MM/DD/YYYY HH24:MI:SS.FF'), TP_TZ) AT TIME ZONE 'AMERICA/CHICAGO','YYYYMMDDHH24MISSFF3');
	END;

	FUNCTION ZEB_GET_OWNER_ID(F_GID IN VARCHAR2,F_PID IN VARCHAR2)
		RETURN NUMBER
		AS
		L_OWNER_ID NUMBER;
	BEGIN
		SELECT ID INTO L_OWNER_ID FROM ZEB_RESEQUENCER_GROUP WHERE GROUP_ID=F_GID AND PROCESS_ID=F_PID;
		RETURN L_OWNER_ID;
	END;

	PROCEDURE ZBR_RESEQUENCER_INSERT_RESEQ_MSG(MSG_VAL IN ZBR_RESEQUENCER_PKG_MSG_LIST,P_STATUS OUT VARCHAR2,P_MSG OUT VARCHAR2,
				P_GRP_CONSUMER_STATUS OUT VARCHAR2,P_OUT_VALUE OUT ZBR_RESEQUENCER_PKG_ATTRIBUTE_LIST) AS

		/*This procedure will receive data from OIC in table type input and Load into Group and Message table. It will return the status and message
			of the transaction.It will also return Group Consumer Process status from Control table*/

		L_STATUS   VARCHAR2(10);
		L_MSG      VARCHAR2(2000);
		L_GRP_CONSUMER_STATUS VARCHAR2(100);

	BEGIN
			FORALL I IN MSG_VAL.FIRST..MSG_VAL.LAST 
			INSERT  /*+ IGNORE_ROW_ON_DUPKEY_INDEX (ZEB_RESEQUENCER_GROUP (group_id,process_id)) */ into ZEB_RESEQUENCER_GROUP
				(COMPONENT_DN,
				OPERATION,
				GROUP_ID,
				PROCESS_ID,
				TP_NAME,
				STATUS,
				LAST_UPDATED_TIME,
				CREATED_DATE,
				CONTAINER_ID,
				CREATED_BY,
				LAST_UPDATED_BY,
				FLOW_ID)
					VALUES 
				(MSG_VAL(I).COMPONENT_DN,
				MSG_VAL(I).OPERATION,
				MSG_VAL(I).GROUP_ID,
				MSG_VAL(I).PROCESS_ID,
				MSG_VAL(I).TP_NAME,
				'N',
				zeb_cst_conv(MSG_VAL(I).CREATED_DATE,MSG_VAL(I).SOURCE_URI)	,
				zeb_cst_conv(MSG_VAL(I).CREATED_DATE,MSG_VAL(I).SOURCE_URI)	,
				MSG_VAL(I).CONTAINER_ID,
				MSG_VAL(I).CREATED_BY,
				MSG_VAL(I).LAST_UPDATED_BY,
				MSG_VAL(I).FLOW_ID);

				COMMIT;

			FORALL I IN MSG_VAL.FIRST..MSG_VAL.LAST 
			INSERT INTO ZEB_RESEQUENCER_MESSAGE(
			OWNER_ID			 , 
			COMPONENT_DN		 ,
			OPERATION			 ,
			LEVEL_DETAIL2		 ,
			GROUP_ID			 ,
			NAME				 ,
			TYPE		  		 ,
			BIN		  			 ,
			SEQUENCE_ID			 ,
			CREATED_DATE		 ,
			SOURCE_URI			 ,
			STANDARD_SEQUENCE_ID ,
			STATUS				 ,
			INSTANCE_CREATED	 ,
			TENANT_ID			 ,
			FLOW_ID				 ,
			ATTRIBUTE1			 ,
			ATTRIBUTE2			 ,
			ATTRIBUTE3			 ,
			ATTRIBUTE4			 ,
			ATTRIBUTE5			 ,
			ATTRIBUTE6			 ,
			ATTRIBUTE7			 ,
			ATTRIBUTE8			 ,
			ATTRIBUTE9			 ,
			ATTRIBUTE10		 	 ,
			START_SEQUENCE_ID  	 ,
			LAST_SEQUENCE_ID   	 ,
			NEXT_SEQUENCE_ID   	 ,
			LAST_UPDATED_TIME,
			PROCESS_ID,
			TP_NAME,
			CONTAINER_ID,
			CREATED_BY,
			LAST_UPDATED_BY)   
			VALUES(	
			ZEB_GET_OWNER_ID(MSG_VAL(I).GROUP_ID,MSG_VAL(I).PROCESS_ID),
			MSG_VAL(I).COMPONENT_DN		    ,
			MSG_VAL(I).OPERATION			,
			MSG_VAL(I).LEVEL_DETAIL2		,
			MSG_VAL(I).GROUP_ID			    ,
			MSG_VAL(I).NAME				    ,
			MSG_VAL(I).TYPE		  		    ,
			MSG_VAL(I).BIN		  			,
			MSG_VAL(I).SEQUENCE_ID			,
			ZEB_CST_CONV(MSG_VAL(I).CREATED_DATE,MSG_VAL(I).SOURCE_URI)		,
			MSG_VAL(I).SOURCE_URI			,
			MSG_VAL(I).STANDARD_SEQUENCE_ID ,
			MSG_VAL(I).STATUS				,
			MSG_VAL(I).INSTANCE_CREATED	    ,
			MSG_VAL(I).TENANT_ID			,
			MSG_VAL(I).FLOW_ID				,
			MSG_VAL(I).ATTRIBUTE1			,
			MSG_VAL(I).ATTRIBUTE2			,
			MSG_VAL(I).ATTRIBUTE3			,
			MSG_VAL(I).ATTRIBUTE4			,
			MSG_VAL(I).ATTRIBUTE5			,
			MSG_VAL(I).ATTRIBUTE6			 ,
			MSG_VAL(I).ATTRIBUTE7			 ,
			MSG_VAL(I).ATTRIBUTE8			 ,
			MSG_VAL(I).ATTRIBUTE9			 ,
			MSG_VAL(I).ATTRIBUTE10		 ,
			MSG_VAL(I).START_SEQUENCE_ID  	,
			MSG_VAL(I).LAST_SEQUENCE_ID   	,
			MSG_VAL(I).NEXT_SEQUENCE_ID   	,
			ZEB_CST_CONV(MSG_VAL(I).CREATED_DATE,MSG_VAL(I).SOURCE_URI),
			MSG_VAL(I).PROCESS_ID,
			MSG_VAL(I).TP_NAME,
			MSG_VAL(I).CONTAINER_ID,
			MSG_VAL(I).CREATED_BY,
			MSG_VAL(I).LAST_UPDATED_BY);	

			COMMIT;

			SELECT PROCESS_STATUS INTO L_GRP_CONSUMER_STATUS FROM ZEB_RESEQ_CONTROL_TBL WHERE UPPER(PROCESS_NAME)='RESEQ GROUP CONSUMER';

				L_MSG := 'RECORD INSERTED SUCCESSFULLY';
				L_STATUS:='SUCCESS';
				P_STATUS:=L_STATUS;
				P_MSG:=L_MSG;
				P_GRP_CONSUMER_STATUS:=L_GRP_CONSUMER_STATUS;
				P_OUT_VALUE:=NULL;

			EXCEPTION
				WHEN OTHERS THEN
				L_MSG := ' UNEXPECTED ERROR OCCURED WHILE INSERTING INTO ZEB_RESEQUENCER_MESSAGE: '|| SQLERRM;
				L_STATUS:='ERROR';
				P_STATUS:=L_STATUS;
				P_MSG:=L_MSG;
				P_OUT_VALUE:=NULL;

	END ZBR_RESEQUENCER_INSERT_RESEQ_MSG;

	PROCEDURE ZBR_RESEQUENCER_UPDATE_RESEQ_GRP(P_LAST_UPDATED_BY IN VARCHAR2,P_STATUS OUT VARCHAR2,P_MSG OUT VARCHAR2) AS

	/*This procedure will reset the status in Group table if any new message arrives for the Completed Group_id. */

		L_STATUS       VARCHAR2(10) :=NULL;
		L_MSG      VARCHAR2(2000);
		CURSOR L_CURSOR IS SELECT OWNER_ID,MIN(CREATED_DATE) AS CREATED_DATE FROM ZEB_RESEQUENCER_MESSAGE WHERE STATUS=0 GROUP BY OWNER_ID;

	BEGIN
			FOR I IN L_CURSOR LOOP
				UPDATE ZEB_RESEQUENCER_GROUP 
				SET STATUS =(CASE WHEN STATUS='C' THEN 'N' ELSE STATUS END  ),
						LAST_UPDATED_TIME=TO_CHAR(LOCALTIMESTAMP AT TIME ZONE 'AMERICA/CHICAGO','YYYYMMDDHH24MISSFF3'),
                        CREATED_DATE=I.CREATED_DATE,
						LAST_UPDATED_BY=P_LAST_UPDATED_BY
						WHERE ID=I.OWNER_ID;
			END LOOP;
			 COMMIT;

				L_MSG := 'RECORD UPDATED SUCCESSFULLY';
				L_STATUS:='SUCCESS';
				P_STATUS:=L_STATUS;
				P_MSG:=L_MSG;

			EXCEPTION
				WHEN OTHERS THEN
				L_MSG := ' UNEXPECTED ERROR OCCURED WHILE UPDATING ZEB_RESEQUENCER_GROUP: '|| SQLERRM;
				L_STATUS:='ERROR';
				P_STATUS:=L_STATUS;
				P_MSG:=L_MSG;

	END ZBR_RESEQUENCER_UPDATE_RESEQ_GRP;

	PROCEDURE ZBR_RESEQUENCER_GET_NEW_GRPS(P_GRP_CNT IN NUMBER,P_LAST_UPDATED_BY IN VARCHAR2,P_IN_VALUE IN ZBR_RESEQUENCER_PKG_ATTRIBUTE_LIST,
	P_RECORD OUT ZBR_RESEQUENCER_PKG_GET_GRP_LIST,P_GRP_AVL_CNT OUT NUMBER) AS

			/*This procedure will return the new Groups for processing. The max no of groups in Process is restrict to 40. It will also change the status
			 of the picked group.*/

			L_IN_PROCESS_CNT NUMBER:=0;
			L_TO_BE_PROCESS_CNT NUMBER:=0;
			L_NEW_GRP_CNT NUMBER:=0;
			L_UPD_STATUS VARCHAR2(20);
			L_UPD_MSG VARCHAR2(4000);
	BEGIN
			ZBR_RESEQUENCER_UPDATE_RESEQ_GRP(P_LAST_UPDATED_BY,L_UPD_STATUS,L_UPD_MSG);
			DBMS_OUTPUT.PUT_LINE(L_UPD_STATUS||' : '||L_UPD_MSG);

				SELECT COUNT(GROUP_ID) INTO L_IN_PROCESS_CNT FROM ZEB_RESEQUENCER_GROUP WHERE STATUS='P';
				SELECT COUNT(GROUP_ID) INTO L_NEW_GRP_CNT FROM ZEB_RESEQUENCER_GROUP WHERE STATUS='N';
				L_TO_BE_PROCESS_CNT:=P_GRP_CNT-L_IN_PROCESS_CNT;
	IF (L_TO_BE_PROCESS_CNT>0 AND L_NEW_GRP_CNT>0) THEN
		WITH IN_PROCESS_GROUP AS(
		SELECT PROCESS_ID,COUNT(1) IN_PROCESS FROM ZEB_RESEQUENCER_GROUP
		WHERE STATUS='P' 
		GROUP BY PROCESS_ID
		),
		TP_METADATA AS(
		SELECT TP_NAME,COUNT-NVL(IN_PROCESS,0) AVL_PROCESS_CNT FROM ZEB_RESEQUENCER_TP_METADATA M
		LEFT JOIN IN_PROCESS_GROUP D ON M.TP_NAME=D.PROCESS_ID
		WHERE M.ACTIVE='Y'
		)
		SELECT ZBR_RESEQUENCER_PKG_GET_GRP_REC(ID,GROUP_ID,PROCESS_ID,TP_NAME,COMPONENT_DN,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL)
			BULK COLLECT INTO P_RECORD
			FROM(SELECT ID,GROUP_ID,PROCESS_ID,TP_NAME,COMPONENT_DN,CREATED_DATE
				 FROM 	(SELECT G.ID,G.GROUP_ID,G.PROCESS_ID,G.TP_NAME,G.COMPONENT_DN,G.CREATED_DATE,
										ROW_NUMBER() OVER(PARTITION BY G.PROCESS_ID ORDER BY G.CREATED_DATE) RN	,M.AVL_PROCESS_CNT
						 FROM ZEB_RESEQUENCER_GROUP G INNER JOIN TP_METADATA M ON G.PROCESS_ID=M.TP_NAME
						 WHERE G.STATUS='N' 
						 AND FROM_TZ(TO_TIMESTAMP(G.CREATED_DATE,'YYYYMMDDHH24MISSFF3'),'AMERICA/CHICAGO')<=SYSTIMESTAMP AT TIME ZONE 'AMERICA/CHICAGO'-INTERVAL '2' SECOND
						) 
				 WHERE RN<=AVL_PROCESS_CNT ORDER BY CREATED_DATE
				 ) 
			WHERE ROWNUM<=L_TO_BE_PROCESS_CNT;

			FORALL I IN P_RECORD.FIRST..P_RECORD.LAST 
				UPDATE ZEB_RESEQUENCER_GROUP
				SET STATUS='P', LAST_UPDATED_TIME=TO_CHAR(LOCALTIMESTAMP AT TIME ZONE 'AMERICA/CHICAGO','YYYYMMDDHH24MISSFF3')
				WHERE ID=P_RECORD(I).ID;
			COMMIT;

			UPDATE ZEB_RESEQ_CONTROL_TBL
			SET PROCESS_STATUS=(CASE WHEN UPPER(PROCESS_STATUS)='NOT RUNNING' THEN 'RUNNING' ELSE PROCESS_STATUS END)
			WHERE UPPER(PROCESS_NAME)='RESEQ GROUP CONSUMER';			
			COMMIT;
	ELSE 
			UPDATE ZEB_RESEQ_CONTROL_TBL SET PROCESS_STATUS='NOT RUNNING' WHERE UPPER(PROCESS_NAME)='RESEQ GROUP CONSUMER';
			COMMIT;
			DBMS_OUTPUT.PUT_LINE('NO NEW MESSAGES AVAILABLE');
            --P_RECORD:=ZBR_RESEQUENCER_PKG_GET_GRP_LIST(NULL);
	END IF;	
			SELECT COUNT(GROUP_ID) INTO P_GRP_AVL_CNT FROM ZEB_RESEQUENCER_GROUP WHERE STATUS='N';
	END ZBR_RESEQUENCER_GET_NEW_GRPS;	

	PROCEDURE ZBR_RESEQUENCER_GET_NEW_MSGS(P_MSG_CNT IN NUMBER,P_GRPID IN VARCHAR2,P_PROCESS_ID IN VARCHAR2,P_LAST_UPDATED_BY IN VARCHAR2,
	P_IN_VALUE IN ZBR_RESEQUENCER_PKG_ATTRIBUTE_LIST,P_MSG_ID OUT ZBR_RESEQUENCER_PKG_GET_MSG_LIST)
			AS

			/*This procedure will return the CLOB payload for processing, from Message table of the respective Group returned by Get Group Procedure.
			It will also change the status of the record.	*/

			BEGIN
			SELECT  ZBR_RESEQUENCER_PKG_GET_MSG_REC(BIN,ID,ATTRIBUTE1,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL) BULK COLLECT INTO P_MSG_ID  FROM(
			SELECT BIN,ID,ATTRIBUTE1,RANK() OVER(PARTITION BY GROUP_ID,PROCESS_ID ORDER BY CREATED_DATE) RNK,CREATED_DATE 
			FROM ZEB_RESEQUENCER_MESSAGE 
			WHERE GROUP_ID=P_GRPID AND PROCESS_ID=P_PROCESS_ID AND  STATUS='0'
			 ) WHERE RNK<=P_MSG_CNT AND 
			FROM_TZ(TO_TIMESTAMP(CREATED_DATE,'YYYYMMDDHH24MISSFF3'),'AMERICA/CHICAGO')<=SYSTIMESTAMP AT TIME ZONE 'AMERICA/CHICAGO'-INTERVAL '2' SECOND
			 ORDER BY RNK; 


            FOR I IN P_MSG_ID.FIRST..P_MSG_ID.LAST LOOP
			UPDATE ZEB_RESEQUENCER_MESSAGE
			SET STATUS=2,
			LAST_UPDATED_TIME=TO_CHAR(LOCALTIMESTAMP AT TIME ZONE 'AMERICA/CHICAGO','YYYYMMDDHH24MISSFF3'),
			LAST_UPDATED_BY=P_LAST_UPDATED_BY,
			PICKED_DATE_TIME=TO_CHAR(LOCALTIMESTAMP AT TIME ZONE 'AMERICA/CHICAGO','YYYYMMDDHH24MISSFF3')
			WHERE ID=P_MSG_ID(I).ID;

			COMMIT;
            END LOOP;

			EXCEPTION
			WHEN OTHERS THEN
			DBMS_OUTPUT.PUT_LINE('UNEXPECTED ERROR OCCURED: '||SQLERRM);

	END ZBR_RESEQUENCER_GET_NEW_MSGS;

	PROCEDURE ZBR_RESEQUENCER_UPDATE_STATUS(P_GRP_ID IN VARCHAR2,P_PROCESS_ID IN VARCHAR2,P_ID IN NUMBER,P_ERROR IN VARCHAR2
	,P_OIC_STATUS IN VARCHAR2,P_LAST_UPDATED_BY IN VARCHAR2,P_FLOW_ID IN VARCHAR2,P_IN_VALUE IN ZBR_RESEQUENCER_PKG_ATTRIBUTE_LIST,
	P_TAB_NAME IN VARCHAR2 DEFAULT NULL,P_PENDING_MSG_CNT OUT NUMBER ,P_STATUS OUT VARCHAR2,P_MSG OUT VARCHAR2,P_GRP_CONSUMER_STATUS OUT VARCHAR2,
	P_OUT_VALUE OUT ZBR_RESEQUENCER_PKG_ATTRIBUTE_LIST) AS

	/*This procedure will Update the Status in Group and Message table.  */


		L_STATUS VARCHAR2(15);
		L_MSG VARCHAR2(2000);
		L_GRP_CONSUMER_STATUS VARCHAR2(100);
		BEGIN
		IF UPPER(P_TAB_NAME)='ZEB_RESEQUENCER_GROUP' THEN
		UPDATE ZEB_RESEQUENCER_GROUP
			SET STATUS=P_OIC_STATUS,
			LAST_UPDATED_TIME=TO_CHAR(LOCALTIMESTAMP AT TIME ZONE 'AMERICA/CHICAGO','YYYYMMDDHH24MISSFF3'),
			ERROR=P_ERROR,
			FLOW_ID=P_FLOW_ID,
			LAST_UPDATED_BY=P_LAST_UPDATED_BY
			WHERE GROUP_ID=P_GRP_ID AND PROCESS_ID=P_PROCESS_ID;
			COMMIT;

			L_STATUS:='SUCCESS';
			L_MSG:='STATUS UPDATED IN ZEB_RESEQUENCER_GROUP TABLE';
		ELSE
		BEGIN
		IF P_OIC_STATUS='1' THEN
			UPDATE ZEB_RESEQUENCER_MESSAGE
			SET STATUS='1',
			LAST_UPDATED_TIME=TO_CHAR(LOCALTIMESTAMP AT TIME ZONE 'AMERICA/CHICAGO','YYYYMMDDHH24MISSFF3'),
			ERROR=P_ERROR,
			FLOW_ID=P_FLOW_ID,
			LAST_UPDATED_BY=P_LAST_UPDATED_BY
			WHERE ID=P_ID;
			COMMIT;
			SELECT COUNT(*) INTO P_PENDING_MSG_CNT FROM ZEB_RESEQUENCER_MESSAGE WHERE STATUS='0' AND GROUP_ID=P_GRP_ID AND PROCESS_ID=P_PROCESS_ID;
				IF P_PENDING_MSG_CNT=0 THEN 
					UPDATE ZEB_RESEQUENCER_GROUP
					SET STATUS='C',
					LAST_UPDATED_TIME=TO_CHAR(LOCALTIMESTAMP AT TIME ZONE 'AMERICA/CHICAGO','YYYYMMDDHH24MISSFF3'),
					ERROR=P_ERROR,
					FLOW_ID=P_FLOW_ID,
					LAST_UPDATED_BY=P_LAST_UPDATED_BY
					WHERE GROUP_ID=P_GRP_ID AND PROCESS_ID=P_PROCESS_ID;
					COMMIT;
				END IF;
			L_STATUS:='SUCCESS';
			L_MSG:=CASE WHEN P_PENDING_MSG_CNT=0 THEN 'STATUS UPDATED IN ZEB_RESEQUENCER_MESSAGE/GROUP TABLE' 
							ELSE 'STATUS UPDATED IN ZEB_RESEQUENCER_MESSAGE TABLE' END;	
		ELSIF 	P_OIC_STATUS='3' THEN	
			UPDATE ZEB_RESEQUENCER_MESSAGE
			SET STATUS='3',
			LAST_UPDATED_TIME=TO_CHAR(LOCALTIMESTAMP AT TIME ZONE 'AMERICA/CHICAGO','YYYYMMDDHH24MISSFF3'),
			ERROR=P_ERROR,
			FLOW_ID=P_FLOW_ID,
			LAST_UPDATED_BY=P_LAST_UPDATED_BY
			WHERE ID=P_ID;

			UPDATE ZEB_RESEQUENCER_GROUP
			SET STATUS='E',
			LAST_UPDATED_TIME=TO_CHAR(LOCALTIMESTAMP AT TIME ZONE 'AMERICA/CHICAGO','YYYYMMDDHH24MISSFF3'),
			ERROR=P_ERROR,
			FLOW_ID=P_FLOW_ID,
			LAST_UPDATED_BY=P_LAST_UPDATED_BY
			WHERE GROUP_ID=P_GRP_ID AND PROCESS_ID=P_PROCESS_ID;
			COMMIT;

			L_STATUS:='SUCCESS';
			L_MSG:='STATUS UPDATED IN ZEB_RESEQUENCER_MESSAGE/GROUP TABLE';
			/* ABORT*/
		ELSIF 	P_OIC_STATUS='4' THEN	
			UPDATE ZEB_RESEQUENCER_MESSAGE
			SET STATUS='4',
			LAST_UPDATED_TIME=TO_CHAR(LOCALTIMESTAMP AT TIME ZONE 'AMERICA/CHICAGO','YYYYMMDDHH24MISSFF3'),
			ERROR=NULL,
			FLOW_ID=P_FLOW_ID,
			LAST_UPDATED_BY=P_LAST_UPDATED_BY
			WHERE ID=P_ID;

			UPDATE ZEB_RESEQUENCER_GROUP
			SET STATUS='C',
			LAST_UPDATED_TIME=TO_CHAR(LOCALTIMESTAMP AT TIME ZONE 'AMERICA/CHICAGO','YYYYMMDDHH24MISSFF3'),
			ERROR=P_ERROR,
			FLOW_ID=P_FLOW_ID,
			LAST_UPDATED_BY=P_LAST_UPDATED_BY
			WHERE GROUP_ID=P_GRP_ID AND PROCESS_ID=P_PROCESS_ID;
			COMMIT;

			L_STATUS:='SUCCESS';
			L_MSG:='STATUS UPDATED IN ZEB_RESEQUENCER_MESSAGE/GROUP TABLE';	
			/* RESUBMIT*/
		ELSIF 	P_OIC_STATUS='5' THEN	
			UPDATE ZEB_RESEQUENCER_MESSAGE
			SET STATUS='0',
			LAST_UPDATED_TIME=TO_CHAR(LOCALTIMESTAMP AT TIME ZONE 'AMERICA/CHICAGO','YYYYMMDDHH24MISSFF3'),
			ERROR=NULL,
			FLOW_ID=P_FLOW_ID,
			LAST_UPDATED_BY=P_LAST_UPDATED_BY
			WHERE GROUP_ID=P_GRP_ID AND PROCESS_ID=P_PROCESS_ID
			and STATUS='3';

			UPDATE ZEB_RESEQUENCER_GROUP
			SET STATUS='N',
			LAST_UPDATED_TIME=TO_CHAR(LOCALTIMESTAMP AT TIME ZONE 'AMERICA/CHICAGO','YYYYMMDDHH24MISSFF3'),
			ERROR=NULL,
			FLOW_ID=P_FLOW_ID,
			LAST_UPDATED_BY=P_LAST_UPDATED_BY
			WHERE GROUP_ID=P_GRP_ID AND PROCESS_ID=P_PROCESS_ID;
			COMMIT;

			L_STATUS:='SUCCESS';
			L_MSG:='STATUS UPDATED IN ZEB_RESEQUENCER_MESSAGE/GROUP TABLE';	
		ELSE 
			L_STATUS:='FAILED';
			L_MSG:='INVALID OIC STATUS';
		END IF;
		END;
		END IF;

		SELECT PROCESS_STATUS INTO L_GRP_CONSUMER_STATUS FROM ZEB_RESEQ_CONTROL_TBL WHERE UPPER(PROCESS_NAME)='RESEQ GROUP CONSUMER';

			P_STATUS:=L_STATUS;
			P_MSG:=L_MSG;
			P_GRP_CONSUMER_STATUS:=L_GRP_CONSUMER_STATUS;
			P_OUT_VALUE:=NULL;
		EXCEPTION
				WHEN OTHERS THEN
				L_STATUS:='FAILED';
				L_MSG:='UNEXPECTED ERROR OCCURED: '||SQLERRM;
				P_STATUS:=L_STATUS;
				P_MSG:=L_MSG;
				P_GRP_CONSUMER_STATUS:=NULL;
				P_OUT_VALUE:=NULL;
	END ZBR_RESEQUENCER_UPDATE_STATUS;

    PROCEDURE ZBR_RESEQUENCER_TABLE_PURGE(p_status out varchar2,P_MSG OUT VARCHAR2,p_purge_days in number default 90,p_limit in number default 100)
	 AS

		/*This procedure will delete the records from Group and Message Table. */

    L_STATUS  varchar2(10);
    L_MSG  varchar2(4000);
    L_ID ZBR_RESEQUENCER_PKG_ID_LIST:=ZBR_RESEQUENCER_PKG_ID_LIST();
    CURSOR L_PURGE_CURSOR(L_PURGE_DAYS NUMBER) IS SELECT OWNER_ID FROM ZEB_RESEQUENCER_MESSAGE
        WHERE TO_DATE(SUBSTR(CREATED_DATE,1,8),'YYYYMMDD')<SYSDATE-L_PURGE_DAYS;
    L_PURGE_CNT NUMBER:=0;    

    BEGIN

        OPEN L_PURGE_CURSOR(p_purge_days);
        LOOP
        FETCH L_PURGE_CURSOR BULK COLLECT INTO L_ID LIMIT P_LIMIT;
        EXIT WHEN L_ID.COUNT=0;
        FORALL I IN L_ID.FIRST..L_ID.COUNT
        DELETE FROM ZEB_RESEQUENCER_MESSAGE WHERE OWNER_ID=L_ID(I) AND STATUS IN('1','4');
        FORALL I IN L_ID.FIRST..L_ID.COUNT
        DELETE FROM ZEB_RESEQUENCER_GROUP WHERE ID=L_ID(I) AND STATUS='C';
        COMMIT;
        L_PURGE_CNT:=L_PURGE_CNT+L_ID.COUNT;
        END LOOP;

   L_STATUS := 'SUCCESS';
   L_MSG:=L_PURGE_CNT||' RECORDS PURGED SUCCESSFULLY.';
   P_STATUS:=L_STATUS;
   P_MSG:=L_MSG;
  EXCEPTION
    WHEN OTHERS THEN
        L_STATUS := 'FAILED';
        L_MSG:='UNEXPECTED ERROR HAPPENED WHILE PURGING :'||SQLERRM;
        P_STATUS:=L_STATUS;
        P_MSG:=L_MSG;
 END ZBR_RESEQUENCER_TABLE_PURGE;

 PROCEDURE ZBR_RESEQENCER_VB_GET_GROUPS(P_GROUP_LIST OUT ZEB_RESEQUENCER_VB_GROUP_LIST,P_STATUS OUT VARCHAR2,P_MSG OUT VARCHAR2,
										P_ADDITIONAL_FILTER IN VARCHAR2 DEFAULT NULL)
AS
L_STATUS VARCHAR2(20);
L_MSG VARCHAR2(4000);
P_FILTER VARCHAR2(4000):=P_ADDITIONAL_FILTER;
L_STMT VARCHAR2(4000):=Q'[
WITH MESSAGE AS(
SELECT OWNER_ID,COUNT(ID) CNT FROM ZEB_RESEQUENCER_MESSAGE GROUP BY OWNER_ID)
SELECT 
ZEB_RESEQUENCER_VB_GROUP_REC(ROWNUM         ,
G.ID                ,
G.COMPONENT_DN      ,
G.OPERATION         ,
G.GROUP_ID          ,
SUBSTR(G.GROUP_ID,1,INSTR(G.GROUP_ID,'-')-1)     ,
G.PROCESS_ID        ,
G.STATUS||':('||M.CNT||')'            ,
DECODE(G.STATUS,'P','LOCKED','E','ERROR')      ,
TO_CHAR(TO_TIMESTAMP(G.CREATED_DATE,'YYYYMMDDHH24MISSFF3'),'YYYY-MM-DD HH24:MI:SS.FF')      ,
TO_CHAR(TO_TIMESTAMP(G.LAST_UPDATED_TIME,'YYYYMMDDHH24MISSFF3'),'YYYY-MM-DD HH24:MI:SS.FF')  ,
G.ERROR             ,
G.FLOW_ID           ,
G.TP_NAME           ,
G.CREATED_BY     ,
G.LAST_UPDATED_BY ,
G.START_SEQUENCE_ID ,
G.LAST_SEQUENCE_ID  ,
G.NEXT_SEQUENCE_ID  ,
G.LAST_RECEIVED_TIME,
G.RESEQUENCER_TYPE  ,
G.CONTAINER_ID      ,
G.TIMEOUT_DURATION  ,
G.ATTRIBUTE1        ,
G.ATTRIBUTE2        ,
G.ATTRIBUTE3        ,
G.ATTRIBUTE4        ,
G.ATTRIBUTE5        ,
G.ATTRIBUTE6        ,
G.ATTRIBUTE7        ,
G.ATTRIBUTE8        ,
G.ATTRIBUTE9        ,
G.ATTRIBUTE10 )       
FROM ZEB_RESEQUENCER_GROUP G INNER JOIN MESSAGE M
ON G.ID=M.OWNER_ID
WHERE STATUS IN('P','E') ]'||P_FILTER||' ORDER BY LAST_UPDATED_TIME';
BEGIN
EXECUTE IMMEDIATE L_STMT BULK COLLECT INTO P_GROUP_LIST; 

L_STATUS:='SUCCESS';
L_MSG:='RECORDS RETURNED SUCCESSFULLY';
P_STATUS:=L_STATUS;
P_MSG:=L_MSG;

EXCEPTION
WHEN OTHERS THEN
L_STATUS:='FAILED';
L_MSG:='UNEXPECTED ERROR WHILE FETCHING RECORDS: '||SQLERRM;
P_STATUS:=L_STATUS;
P_MSG:=L_MSG;

END ZBR_RESEQENCER_VB_GET_GROUPS;

 PROCEDURE ZBR_RESEQENCER_VB_GET_MESSAGE(P_IN_VALUE IN ZBR_RESEQUENCER_PKG_ATTRIBUTE_REC,P_MESSAGE_LIST OUT ZEB_RESEQUENCER_VB_MESSAGE_LIST,P_STATUS OUT VARCHAR2,P_MSG OUT VARCHAR2)
AS
L_STATUS VARCHAR2(20);
L_MSG VARCHAR2(4000);
BEGIN
SELECT 
ZEB_RESEQUENCER_VB_MESSAGE_REC(
ROWNUM                 ,
ID                     ,
OWNER_ID               ,
COMPONENT_DN           ,
GROUP_ID               ,
SOURCE_URI             ,
PROCESS_ID             ,
STATUS                 ,
DECODE(STATUS,'0','READY','1','PROCESSED','2','LOCKED','3','ERROR','4','ABORT')           ,
TO_CHAR(TO_TIMESTAMP(CREATED_DATE,'YYYYMMDDHH24MISSFF3'),'YYYY-MM-DD HH24:MI:SS.FF')      ,
TO_CHAR(TO_TIMESTAMP(LAST_UPDATED_TIME,'YYYYMMDDHH24MISSFF3'),'YYYY-MM-DD HH24:MI:SS.FF')  ,
ERROR                  ,
OPERATION              ,
LEVEL_DETAIL2          ,
NAME                   ,
TYPE                   ,
BIN                    ,
SEQUENCE_ID            ,
STANDARD_SEQUENCE_ID   ,
INSTANCE_CREATED       ,
TENANT_ID              ,
FLOW_ID                ,
CONTAINER_ID           ,
CREATED_BY             ,
LAST_UPDATED_BY        ,
START_SEQUENCE_ID      ,
LAST_SEQUENCE_ID       ,
NEXT_SEQUENCE_ID       ,
TP_NAME                ,
TO_CHAR(TO_TIMESTAMP(PICKED_DATE_TIME,'YYYYMMDDHH24MISSFF3'),'YYYY-MM-DD HH24:MI:SS.FF') ,
ATTRIBUTE1             ,
ATTRIBUTE2             ,
ATTRIBUTE3             ,
ATTRIBUTE4             ,
ATTRIBUTE5             ,
ATTRIBUTE6             ,
ATTRIBUTE7             ,
ATTRIBUTE8             ,
ATTRIBUTE9             ,
ATTRIBUTE10 )
BULK COLLECT INTO P_MESSAGE_LIST           
FROM ZEB_RESEQUENCER_MESSAGE
WHERE GROUP_ID=P_IN_VALUE.ATTRIBUTE1 AND PROCESS_ID=P_IN_VALUE.ATTRIBUTE2 AND STATUS IN ('0','2','3')
ORDER BY CREATED_DATE;

L_STATUS:='SUCCESS';
L_MSG:='RECORDS RETURNED SUCCESSFULLY';
P_STATUS:=L_STATUS;
P_MSG:=L_MSG;

EXCEPTION
WHEN OTHERS THEN
L_STATUS:='FAILED';
L_MSG:='UNEXPECTED ERROR WHILE FETCHING RECORDS: '||SQLERRM;
P_STATUS:=L_STATUS;
P_MSG:=L_MSG;

END ZBR_RESEQENCER_VB_GET_MESSAGE;

PROCEDURE ZBR_RESEQUENCER_UPDATE_STATUS_JAVA(P_GRP_ID IN VARCHAR2,P_PROCESS_ID IN VARCHAR2,P_ID IN NUMBER,P_ERROR IN VARCHAR2
	,P_OIC_STATUS IN VARCHAR2,P_LAST_UPDATED_BY IN VARCHAR2,P_FLOW_ID IN VARCHAR2, P_TAB_NAME IN VARCHAR2 DEFAULT NULL,
	P_PENDING_MSG_CNT OUT NUMBER ,P_STATUS OUT VARCHAR2,P_MSG OUT VARCHAR2,P_GRP_CONSUMER_STATUS OUT VARCHAR2) AS

	/*This procedure will be called From JAVA program to Resubmit and Abort the message. */
		L_STATUS VARCHAR2(15);
		L_MSG VARCHAR2(2000);
		L_OUT_VALUE ZBR_RESEQUENCER_PKG_ATTRIBUTE_LIST:=ZBR_RESEQUENCER_PKG_ATTRIBUTE_LIST();
		BEGIN
			ZBR_RESEQUENCER_UPDATE_STATUS(P_GRP_ID,P_PROCESS_ID ,P_ID ,P_ERROR ,P_OIC_STATUS,P_LAST_UPDATED_BY,P_FLOW_ID,NULL, P_TAB_NAME,
			P_PENDING_MSG_CNT,P_STATUS,P_MSG,P_GRP_CONSUMER_STATUS,L_OUT_VALUE);
		EXCEPTION
				WHEN OTHERS THEN
				L_STATUS:='FAILED';
				L_MSG:='UNEXPECTED ERROR OCCURED: '||SQLERRM;
				P_STATUS:=L_STATUS;
				P_MSG:=L_MSG;
				P_GRP_CONSUMER_STATUS:=NULL;
END ZBR_RESEQUENCER_UPDATE_STATUS_JAVA;

PROCEDURE ZBR_RESEQUENCER_UPDATE_STATUS_VB(P_ACTION IN VARCHAR2,P_RESUBMIT_CNT IN NUMBER DEFAULT 10,P_STATUS_VBCS IN VARCHAR2 DEFAULT '7',
	P_COMPONENT_DN VARCHAR2,P_GRP_LIST VARCHAR2,P_GROUP_LIST_VB OUT ZEB_RESEQUENCER_VB_GROUP_LIST,P_STATUS OUT VARCHAR2,P_MSG OUT VARCHAR2,
	P_GRP_CONSUMER_STATUS OUT VARCHAR2,P_ADDITIONAL_FILTER IN VARCHAR2 DEFAULT NULL) AS

		CURSOR L_CURSOR (L_CNT NUMBER) IS WITH GRP AS(
			SELECT * FROM(SELECT ID,GROUP_ID,PROCESS_ID,CREATED_DATE FROM ZEB_RESEQUENCER_GROUP WHERE STATUS IN('P','E') ORDER BY CREATED_DATE DESC)
			WHERE ROWNUM<=L_CNT)
			SELECT G.ID GRP_UID,G.GROUP_ID,G.PROCESS_ID,G.CREATED_DATE,M.ID MSG_UID
			FROM GRP G INNER JOIN ZEB_RESEQUENCER_MESSAGE M ON G.ID=M.OWNER_ID; 
		TYPE CUR_REC IS TABLE OF L_CURSOR%ROWTYPE;
		L_REC CUR_REC;
		L_CURSOR_SELECTIVE SYS_REFCURSOR;
		L_STATUS VARCHAR2(15);
		L_MSG VARCHAR2(2000);
		L_GRP_CONSUMER_STATUS VARCHAR2(100);
		L_PENDING_MSG_CNT NUMBER;
		L_OUT_VALUE ZBR_RESEQUENCER_PKG_ATTRIBUTE_LIST:=ZBR_RESEQUENCER_PKG_ATTRIBUTE_LIST();
		BEGIN

			IF UPPER(P_ACTION)='DISPLAY ALL' THEN
				IF P_ADDITIONAL_FILTER IS NOT NULL THEN
				ZBR_RESEQUENCER_PKG.ZBR_RESEQENCER_VB_GET_GROUPS(P_GROUP_LIST_VB,L_STATUS,L_MSG,P_ADDITIONAL_FILTER);
				P_STATUS:=L_STATUS;
				P_MSG:=L_MSG;
				ELSE
				ZBR_RESEQUENCER_PKG.ZBR_RESEQENCER_VB_GET_GROUPS(P_GROUP_LIST_VB,L_STATUS,L_MSG);
				P_STATUS:=L_STATUS;
				P_MSG:=L_MSG;
				END IF;

			ELSIF UPPER(P_ACTION)='RESUBMIT ALL' THEN
				OPEN L_CURSOR(P_RESUBMIT_CNT);
				IF L_CURSOR%ROWCOUNT=0 
				THEN L_STATUS:='SUCCESS';
					 L_MSG:='NO DATA AVAILABLE..';
				END IF;	
				LOOP
				FETCH L_CURSOR BULK COLLECT INTO L_REC LIMIT 1000;
				EXIT WHEN L_REC.COUNT=0;
					FOR I  IN L_REC.FIRST..L_REC.LAST LOOP
					ZBR_RESEQUENCER_PKG.ZBR_RESEQUENCER_UPDATE_STATUS(P_GRP_ID=>L_REC(I).GROUP_ID,P_PROCESS_ID=>L_REC(I).PROCESS_ID,P_ID=>L_REC(I).MSG_UID,
					P_ERROR=>NULL,P_OIC_STATUS=>P_STATUS_VBCS,P_LAST_UPDATED_BY=>USER,P_FLOW_ID=>NULL,P_STATUS=>L_STATUS,P_MSG=>L_MSG,P_IN_VALUE=>NULL,
					P_PENDING_MSG_CNT=>L_PENDING_MSG_CNT,P_OUT_VALUE=>L_OUT_VALUE,P_GRP_CONSUMER_STATUS=>L_GRP_CONSUMER_STATUS);
					END LOOP;
				END LOOP;

			P_STATUS:=L_STATUS;
			P_MSG:=L_MSG;
			P_GRP_CONSUMER_STATUS:=L_GRP_CONSUMER_STATUS;

			ELSIF UPPER(P_ACTION)='RESUBMIT SELECTIVE' THEN
				OPEN L_CURSOR_SELECTIVE FOR WITH DATA AS(SELECT REGEXP_SUBSTR(P_GRP_LIST,'[^,]+',1,LEVEL) GROUPS FROM DUAL
					CONNECT BY REGEXP_SUBSTR(P_GRP_LIST,'[^,]+',1,LEVEL) IS NOT NULL)
					SELECT  G.ID GRP_UID,G.GROUP_ID,G.PROCESS_ID,G.CREATED_DATE,M.ID MSG_UID FROM
					(SELECT ID,GROUP_ID,PROCESS_ID,CREATED_DATE FROM ZEB_RESEQUENCER_GROUP 
					WHERE STATUS IN ('P','E') 
					AND GROUP_ID IN(SELECT GROUPS FROM DATA)
					AND (1=(CASE WHEN P_COMPONENT_DN IS NULL THEN 1 ELSE 0 END ) OR COMPONENT_DN=P_COMPONENT_DN)) G
					INNER JOIN ZEB_RESEQUENCER_MESSAGE M ON G.ID=M.OWNER_ID;
				LOOP
				FETCH L_CURSOR_SELECTIVE BULK COLLECT INTO L_REC LIMIT 1000;
				EXIT WHEN L_REC.COUNT=0;
					FOR I  IN L_REC.FIRST..L_REC.LAST 
					LOOP
					ZBR_RESEQUENCER_PKG.ZBR_RESEQUENCER_UPDATE_STATUS(P_GRP_ID=>L_REC(I).GROUP_ID,P_PROCESS_ID=>L_REC(I).PROCESS_ID,P_ID=>L_REC(I).MSG_UID,
					P_ERROR=>NULL,P_OIC_STATUS=>P_STATUS_VBCS,P_LAST_UPDATED_BY=>USER,P_FLOW_ID=>NULL,P_STATUS=>L_STATUS,P_MSG=>L_MSG,P_IN_VALUE=>NULL,
					P_PENDING_MSG_CNT=>L_PENDING_MSG_CNT,P_OUT_VALUE=>L_OUT_VALUE,P_GRP_CONSUMER_STATUS=>L_GRP_CONSUMER_STATUS);
					END LOOP;
				END LOOP;	

			P_STATUS:=L_STATUS;
			P_MSG:=L_MSG;
			P_GRP_CONSUMER_STATUS:=L_GRP_CONSUMER_STATUS;

			ELSIF UPPER(P_ACTION)='SEARCH' THEN
				BEGIN
				WITH MESSAGE AS(SELECT OWNER_ID,COUNT(ID) CNT FROM ZEB_RESEQUENCER_MESSAGE GROUP BY OWNER_ID)
				SELECT 
				ZEB_RESEQUENCER_VB_GROUP_REC(ROWNUM         ,
				G.ID                ,
				G.COMPONENT_DN      ,
				G.OPERATION         ,
				G.GROUP_ID          ,
				SUBSTR(G.GROUP_ID,1,INSTR(G.GROUP_ID,'-')-1)     ,
				G.PROCESS_ID        ,
				G.STATUS||':('||M.CNT||')'            ,
				DECODE(G.STATUS,'P','LOCKED','E','ERROR')      ,
				TO_CHAR(TO_TIMESTAMP(G.CREATED_DATE,'YYYYMMDDHH24MISSFF3'),'YYYY-MM-DD HH24:MI:SS.FF')      ,
				TO_CHAR(TO_TIMESTAMP(G.LAST_UPDATED_TIME,'YYYYMMDDHH24MISSFF3'),'YYYY-MM-DD HH24:MI:SS.FF')  ,
				G.ERROR             ,
				G.FLOW_ID           ,
				G.TP_NAME           ,
				G.CREATED_BY     ,
				G.LAST_UPDATED_BY ,
				G.START_SEQUENCE_ID ,
				G.LAST_SEQUENCE_ID  ,
				G.NEXT_SEQUENCE_ID  ,
				G.LAST_RECEIVED_TIME,
				G.RESEQUENCER_TYPE  ,
				G.CONTAINER_ID      ,
				G.TIMEOUT_DURATION  ,
				G.ATTRIBUTE1        ,
				G.ATTRIBUTE2        ,
				G.ATTRIBUTE3        ,
				G.ATTRIBUTE4        ,
				G.ATTRIBUTE5        ,
				G.ATTRIBUTE6        ,
				G.ATTRIBUTE7        ,
				G.ATTRIBUTE8        ,
				G.ATTRIBUTE9        ,
				G.ATTRIBUTE10  )
				BULK COLLECT INTO P_GROUP_LIST_VB      
				FROM ZEB_RESEQUENCER_GROUP G INNER JOIN MESSAGE M
				ON G.ID=M.OWNER_ID
				WHERE 
				G.GROUP_ID IN (SELECT REGEXP_SUBSTR(P_GRP_LIST,'[^,]+',1,LEVEL) GROUPS FROM DUAL
								CONNECT BY REGEXP_SUBSTR(P_GRP_LIST,'[^,]+',1,LEVEL) IS NOT NULL)
				AND G.STATUS IN ('P','E')
				ORDER BY LAST_UPDATED_TIME desc; 

					L_STATUS:='SUCCESS';
					L_MSG:=SQL%ROWCOUNT||' Rows fetched..';
					P_STATUS:=L_STATUS;
					P_MSG:=L_MSG;
					P_GRP_CONSUMER_STATUS:=NULL;
				EXCEPTION
					WHEN OTHERS THEN
					L_STATUS:='FAILED';
					L_MSG:='UNEXPECTED ERROR OCCURED: '||SQLERRM;
					P_STATUS:=L_STATUS;
					P_MSG:=L_MSG;
					P_GRP_CONSUMER_STATUS:=NULL;
				END;
			ELSE
				L_STATUS:='FAILED';
				L_MSG:='INVALID ACTION..';
				P_STATUS:=L_STATUS;
				P_MSG:=L_MSG;
				P_GRP_CONSUMER_STATUS:=NULL;
			END IF;
		EXCEPTION
				WHEN OTHERS THEN
				L_STATUS:='FAILED';
				L_MSG:='UNEXPECTED ERROR OCCURED: '||SQLERRM;
				P_STATUS:=L_STATUS;
				P_MSG:=L_MSG;
				P_GRP_CONSUMER_STATUS:=NULL;
	END ZBR_RESEQUENCER_UPDATE_STATUS_VB;

	PROCEDURE ZBR_RESEQENCER_VB_GET_PAYLOAD(P_IN_VALUE IN ZBR_RESEQUENCER_PKG_ATTRIBUTE_REC,P_MESSAGE_LIST OUT ZBR_RESEQUENCER_PKG_GET_MSG_LIST,
										P_STATUS OUT VARCHAR2,P_MSG OUT VARCHAR2)
	AS
	L_STATUS VARCHAR2(20);
	L_MSG VARCHAR2(4000);
	BEGIN
		SELECT  ZBR_RESEQUENCER_PKG_GET_MSG_REC(BIN,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL) BULK COLLECT INTO P_MESSAGE_LIST
		FROM ZEB_RESEQUENCER_MESSAGE
		WHERE ID=P_IN_VALUE.ATTRIBUTE1
		AND GROUP_ID=P_IN_VALUE.ATTRIBUTE2
		AND PROCESS_ID=P_IN_VALUE.ATTRIBUTE3;

		L_STATUS:='SUCCESS';
		L_MSG:='PAYLOAD RETURNED SUCCESSFULLY..';
		P_STATUS:=L_STATUS;
		P_MSG:=L_MSG;

	EXCEPTION
		WHEN OTHERS THEN	
		L_STATUS:='FAILED';
		L_MSG:='Unexpected Error Occured: '||SQLERRM;
		P_STATUS:=L_STATUS;
		P_MSG:=L_MSG;
	END ZBR_RESEQENCER_VB_GET_PAYLOAD;

	PROCEDURE ZBR_RESEQENCER_VB_GET_CONTROL_TP_TBL(P_CONTROL_TBL OUT ZBR_RESEQUENCER_PKG_CONTROL_TBL_LIST,P_TP_TBL IN OUT ZBR_RESEQUENCER_PKG_TP_METADATA_LIST,
										P_STATUS OUT VARCHAR2,P_MSG OUT VARCHAR2,P_ACTION IN VARCHAR2 DEFAULT NULL)
	AS
	L_STATUS VARCHAR2(20);
	L_MSG VARCHAR2(4000);
	BEGIN

	IF P_ACTION IS NULL THEN
	BEGIN
		SELECT ZBR_RESEQUENCER_PKG_CONTROL_TBL_REC(PROCESS_ID,PROCESS_NAME,PROCESS_STATUS,CREATED_BY,CREATED_DATE,LAST_UPDATED_DATE) 
		BULK COLLECT INTO P_CONTROL_TBL
		FROM  ZEB_RESEQ_CONTROL_TBL;

		SELECT ZBR_RESEQUENCER_PKG_TP_METADATA_REC(ID,TP_ID,TP_NAME,COUNT,PROCESS_NAME,ACTIVE,TP_TIMEZONE,ATTRIBUTE1,ATTRIBUTE2,ATTRIBUTE3,ATTRIBUTE4,
		ATTRIBUTE5,ATTRIBUTE6,ATTRIBUTE7,ATTRIBUTE8,ATTRIBUTE9,ATTRIBUTE10) 
		BULK COLLECT INTO P_TP_TBL
		FROM ZEB_RESEQUENCER_TP_METADATA;

		L_STATUS:='SUCCESS';
		L_MSG:='RECORDS RETURNED SUCCESSFULLY..';
		P_STATUS:=L_STATUS;
		P_MSG:=L_MSG;

	EXCEPTION
		WHEN OTHERS THEN	
		L_STATUS:='FAILED';
		L_MSG:='Unexpected Error Occured while fetching: '||SQLERRM;
		P_STATUS:=L_STATUS;
		P_MSG:=L_MSG;
	END;

	ELSE 
		BEGIN

			FORALL I IN P_TP_TBL.FIRST..P_TP_TBL.LAST
			MERGE INTO ZEB_RESEQUENCER_TP_METADATA TP
			USING DUAL
			ON (TP.TP_ID=P_TP_TBL(I).TP_ID)
			WHEN MATCHED THEN
			UPDATE SET
			TP.TP_NAME=P_TP_TBL(I).TP_NAME,
			TP.COUNT=P_TP_TBL(I).COUNT,
			TP.PROCESS_NAME=P_TP_TBL(I).PROCESS_NAME,
			TP.ACTIVE=P_TP_TBL(I).ACTIVE,
			TP.TP_TIMEZONE=P_TP_TBL(I).TP_TIMEZONE
			WHEN NOT MATCHED THEN
			INSERT(TP.TP_ID,TP.TP_NAME,TP.COUNT,TP.PROCESS_NAME,TP.ACTIVE,TP.TP_TIMEZONE)
			VALUES(P_TP_TBL(I).TP_ID,P_TP_TBL(I).TP_NAME,P_TP_TBL(I).COUNT,P_TP_TBL(I).PROCESS_NAME,P_TP_TBL(I).ACTIVE,P_TP_TBL(I).TP_TIMEZONE);

		COMMIT;

			L_STATUS:='SUCCESS';
			L_MSG:='RECORDS MERGED SUCCESSFULLY..';
			P_STATUS:=L_STATUS;
			P_MSG:=L_MSG;

		EXCEPTION
			WHEN OTHERS THEN	
			L_STATUS:='FAILED';
			L_MSG:='Unexpected Error Occured while merging: '||SQLERRM;
			P_STATUS:=L_STATUS;
			P_MSG:=L_MSG;		

		END;

	END IF;	
	END ZBR_RESEQENCER_VB_GET_CONTROL_TP_TBL;

END ZBR_RESEQUENCER_PKG;