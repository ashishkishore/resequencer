SQL> SET FEEDBACK ON
SQL> SET SCAN OFF
SQL> SET TRIMS ON
SQL> SET NUMWIDTH 15
SQL>
SQL>
SQL>
SQL> SELECT TO_CHAR(SYSDATE,'MM-DD-YYYY HH:MI:SS') FROM DUAL;

TO_CHAR(SYSDATE,'MM
-------------------
08-01-2019 10:10:28

1 row selected.

Elapsed: 00:00:00.028
SQL> SELECT USER  FROM DUAL;

USER
--------------------------------------------------------------------------------------------------------------------------------
ADMIN

1 row selected.

Elapsed: 00:00:00.030
SQL>
SQL> @@ZBR_RESEQUENCER_DDL.sql;
SQL>   CREATE TABLE ZEB_RESEQUENCER_GROUP
  2     (	ID NUMBER GENERATED ALWAYS AS IDENTITY ,
  3  	COMPONENT_DN VARCHAR2(4000 BYTE) NOT NULL ENABLE,
  4  	OPERATION VARCHAR2(4000 BYTE) NOT NULL ENABLE,
  5  	GROUP_ID VARCHAR2(3000 BYTE) NOT NULL ENABLE ,
  6  	PROCESS_ID VARCHAR2(3000 BYTE),
  7  	STATUS VARCHAR2(4000 BYTE) NOT NULL ENABLE,
  8  	CREATED_DATE VARCHAR2(4000 BYTE),
  9  	LAST_UPDATED_TIME VARCHAR2(4000 BYTE),
 10  	ERROR VARCHAR2(4000 BYTE),
 11  	FLOW_ID VARCHAR2(4000 BYTE),
 12  	TP_NAME VARCHAR2(4000 BYTE),
 13  	CREATED_BY VARCHAR2(4000 BYTE),
 14  	LAST_UPDATED_BY VARCHAR2(4000 BYTE),
 15  	START_SEQUENCE_ID VARCHAR2(4000 BYTE),
 16  	LAST_SEQUENCE_ID VARCHAR2(4000 BYTE),
 17  	NEXT_SEQUENCE_ID VARCHAR2(4000 BYTE),
 18  	LAST_RECEIVED_TIME VARCHAR2(4000 BYTE),
 19  	RESEQUENCER_TYPE VARCHAR2(4000 BYTE) DEFAULT 'FIFO',
 20  	CONTAINER_ID VARCHAR2(4000 BYTE),
 21  	TIMEOUT_DURATION VARCHAR2(4000 BYTE),
 22  	ATTRIBUTE1 VARCHAR2(4000 BYTE),
 23  	ATTRIBUTE2 VARCHAR2(4000 BYTE),
 24  	ATTRIBUTE3 VARCHAR2(4000 BYTE),
 25  	ATTRIBUTE4 VARCHAR2(4000 BYTE),
 26  	ATTRIBUTE5 VARCHAR2(4000 BYTE),
 27  	ATTRIBUTE6 VARCHAR2(4000 BYTE),
 28  	ATTRIBUTE7 VARCHAR2(4000 BYTE),
 29  	ATTRIBUTE8 VARCHAR2(4000 BYTE),
 30  	ATTRIBUTE9 VARCHAR2(4000 BYTE),
 31  	ATTRIBUTE10 VARCHAR2(4000 BYTE),
 32  	 CONSTRAINT ZRG_GRPRID_PK PRIMARY KEY (GROUP_ID, PROCESS_ID)  ENABLE,
 33  	 CONSTRAINT ZRG_ID_UK UNIQUE (ID) ENABLE
 34     ) ;

Table ZEB_RESEQUENCER_GROUP created.

Elapsed: 00:00:00.084
SQL>
SQL>   CREATE INDEX ZEB_IDX_RESEQ_GRP_CREATED_DT ON ZEB_RESEQUENCER_GROUP (CREATED_DATE) ;

Index ZEB_IDX_RESEQ_GRP_CREATED_DT created.

Elapsed: 00:00:00.038
SQL>   CREATE BITMAP INDEX ZEB_IDX_RESEQ_GRP_STATUS ON ZEB_RESEQUENCER_GROUP (STATUS) ;

INDEX ZEB_IDX_RESEQ_GRP_STATUS created.

Elapsed: 00:00:00.036
SQL>   CREATE INDEX ZEB_IDX_RESEQ_GRP_LAST_UPD_DT ON ZEB_RESEQUENCER_GROUP (LAST_UPDATED_TIME) ;

Index ZEB_IDX_RESEQ_GRP_LAST_UPD_DT created.

Elapsed: 00:00:00.036
SQL>
SQL>
SQL>   CREATE TABLE ZEB_RESEQUENCER_MESSAGE
  2     (ID NUMBER GENERATED ALWAYS AS IDENTITY ,
  3  	OWNER_ID NUMBER,
  4  	COMPONENT_DN VARCHAR2(4000 BYTE) NOT NULL ENABLE,
  5  	GROUP_ID VARCHAR2(4000 BYTE) NOT NULL ENABLE,
  6  	SOURCE_URI VARCHAR2(4000 BYTE),
  7  	PROCESS_ID VARCHAR2(4000 BYTE),
  8  	STATUS VARCHAR2(4000 BYTE),
  9  	CREATED_DATE VARCHAR2(4000 BYTE),
 10  	LAST_UPDATED_TIME VARCHAR2(4000 BYTE),
 11  	ERROR VARCHAR2(4000 BYTE),
 12  	OPERATION VARCHAR2(4000 BYTE) NOT NULL ENABLE,
 13  	LEVEL_DETAIL2 VARCHAR2(4000 BYTE),
 14  	NAME VARCHAR2(4000 BYTE),
 15  	TYPE VARCHAR2(4000 BYTE),
 16  	BIN CLOB,
 17  	SEQUENCE_ID VARCHAR2(4000 BYTE) NOT NULL ENABLE,
 18  	STANDARD_SEQUENCE_ID VARCHAR2(4000 BYTE),
 19  	INSTANCE_CREATED VARCHAR2(4000 BYTE),
 20  	TENANT_ID VARCHAR2(4000 BYTE),
 21  	FLOW_ID VARCHAR2(4000 BYTE),
 22  	CONTAINER_ID VARCHAR2(4000 BYTE),
 23  	CREATED_BY VARCHAR2(4000 BYTE),
 24  	LAST_UPDATED_BY VARCHAR2(4000 BYTE),
 25  	START_SEQUENCE_ID VARCHAR2(4000 BYTE),
 26  	LAST_SEQUENCE_ID VARCHAR2(4000 BYTE),
 27  	NEXT_SEQUENCE_ID VARCHAR2(4000 BYTE),
 28  	TP_NAME VARCHAR2(4000 BYTE),
 29  	PICKED_DATE_TIME VARCHAR2(4000 BYTE),
 30  	ATTRIBUTE1 VARCHAR2(4000 BYTE),
 31  	ATTRIBUTE2 VARCHAR2(4000 BYTE),
 32  	ATTRIBUTE3 VARCHAR2(4000 BYTE),
 33  	ATTRIBUTE4 VARCHAR2(4000 BYTE),
 34  	ATTRIBUTE5 VARCHAR2(4000 BYTE),
 35  	ATTRIBUTE6 VARCHAR2(4000 BYTE),
 36  	ATTRIBUTE7 VARCHAR2(4000 BYTE),
 37  	ATTRIBUTE8 VARCHAR2(4000 BYTE),
 38  	ATTRIBUTE9 VARCHAR2(4000 BYTE),
 39  	ATTRIBUTE10 VARCHAR2(4000 BYTE),
 40  	 CONSTRAINT ZRM_SEQID_PK PRIMARY KEY (SEQUENCE_ID)  ENABLE,
 41  	 CONSTRAINT ZRG_ID_FK FOREIGN KEY (OWNER_ID)
 42  	  REFERENCES ZEB_RESEQUENCER_GROUP (ID) ENABLE
 43     )  ;

Table ZEB_RESEQUENCER_MESSAGE created.

Elapsed: 00:00:00.073
SQL>
SQL>   CREATE INDEX ZEB_IDX_RESEQ_MSG_CREATED_DT ON ZEB_RESEQUENCER_MESSAGE (CREATED_DATE);

Index ZEB_IDX_RESEQ_MSG_CREATED_DT created.

Elapsed: 00:00:00.040
SQL>   CREATE INDEX ZEB_IDX_RESEQ_MSG_COMP_DN ON ZEB_RESEQUENCER_MESSAGE (COMPONENT_DN);

Index ZEB_IDX_RESEQ_MSG_COMP_DN created.

Elapsed: 00:00:00.037
SQL>   CREATE INDEX ZEB_IDX_RESEQ_MSG_STATUS ON ZEB_RESEQUENCER_MESSAGE (STATUS);

Index ZEB_IDX_RESEQ_MSG_STATUS created.

Elapsed: 00:00:00.041
SQL>   CREATE INDEX ZEB_IDX_RESEQ_MSG_GRP_ID ON ZEB_RESEQUENCER_MESSAGE (GROUP_ID);

Index ZEB_IDX_RESEQ_MSG_GRP_ID created.

Elapsed: 00:00:00.046
SQL>   CREATE INDEX ZEB_IDX_RESEQ_MSG_LAST_UPD_DT ON ZEB_RESEQUENCER_MESSAGE (LAST_UPDATED_TIME);

Index ZEB_IDX_RESEQ_MSG_LAST_UPD_DT created.

Elapsed: 00:00:00.046
SQL>
SQL>   CREATE TABLE ZEB_RESEQUENCER_TP_METADATA
  2     (ID NUMBER GENERATED ALWAYS AS IDENTITY ,
  3  	TP_ID VARCHAR2(4000 BYTE) NOT NULL ENABLE,
  4  	TP_NAME VARCHAR2(4000 BYTE) NOT NULL ENABLE,
  5  	COUNT NUMBER,
  6  	PROCESS_NAME VARCHAR2(4000 BYTE),
  7  	ACTIVE VARCHAR2(4000 BYTE) NOT NULL ENABLE,
  8  	TP_TIMEZONE VARCHAR2(4000 BYTE),
  9  	ATTRIBUTE1 VARCHAR2(4000 BYTE),
 10  	ATTRIBUTE2 VARCHAR2(4000 BYTE),
 11  	ATTRIBUTE3 VARCHAR2(4000 BYTE),
 12  	ATTRIBUTE4 VARCHAR2(4000 BYTE),
 13  	ATTRIBUTE5 VARCHAR2(4000 BYTE),
 14  	ATTRIBUTE6 VARCHAR2(4000 BYTE),
 15  	ATTRIBUTE7 VARCHAR2(4000 BYTE),
 16  	ATTRIBUTE8 VARCHAR2(4000 BYTE),
 17  	ATTRIBUTE9 VARCHAR2(4000 BYTE),
 18  	ATTRIBUTE10 VARCHAR2(4000 BYTE),
 19  	 CONSTRAINT ZRTM_ID_PK PRIMARY KEY (ID) ENABLE
 20     )  ;

Table ZEB_RESEQUENCER_TP_METADATA created.

Elapsed: 00:00:00.057
SQL>
SQL>   CREATE TABLE ZEB_RESEQ_CONTROL_TBL
  2     (PROCESS_ID NUMBER GENERATED ALWAYS AS IDENTITY ,
  3  	PROCESS_NAME VARCHAR2(4000 BYTE),
  4  	PROCESS_STATUS VARCHAR2(4000 BYTE),
  5  	CREATED_BY VARCHAR2(4000 BYTE),
  6  	CREATED_DATE VARCHAR2(4000 BYTE),
  7  	LAST_UPDATED_DATE VARCHAR2(4000 BYTE)
  8     ) ;

Table ZEB_RESEQ_CONTROL_TBL created.

Elapsed: 00:00:00.040
SQL>
SQL> /
SQL> @@TP_METADATA_CONTROL_INSERT.sql;
SQL> INSERT INTO zeb_resequencer_tp_metadata(TP_ID,TP_NAME,COUNT,PROCESS_NAME,ACTIVE,TP_TIMEZONE) VALUES
  2  ('SBL','EBOND_SBL',10,'ZEBSBL_TP_EbondInReq_Int','Y','GMT');

1 row inserted.

Elapsed: 00:00:00.043
SQL> INSERT INTO zeb_resequencer_tp_metadata(TP_ID,TP_NAME,COUNT,PROCESS_NAME,ACTIVE,TP_TIMEZONE) VALUES
  2  ('PDS','EBOND_PDS',10,'ZEBSBL_TP_EbondInReq_Int','Y','UTC');

1 row inserted.

Elapsed: 00:00:00.027
SQL> INSERT INTO zeb_resequencer_tp_metadata(TP_ID,TP_NAME,COUNT,PROCESS_NAME,ACTIVE,TP_TIMEZONE) VALUES
  2  ('MOXX','EBOND_MOXX',10,'ZEBSBL_TP_EbondInReq_Int','Y','UTC');

1 row inserted.

Elapsed: 00:00:00.026
SQL> INSERT INTO zeb_resequencer_tp_metadata(TP_ID,TP_NAME,COUNT,PROCESS_NAME,ACTIVE,TP_TIMEZONE) VALUES
  2  ('BARCODING','EBOND_BARCODING',10,'ZEBSBL_TP_EbondInReq_Int','Y','UTC');

1 row inserted.

Elapsed: 00:00:00.028
SQL>
SQL> INSERT INTO zeb_reseq_control_tbl(PROCESS_NAME,PROCESS_STATUS,CREATED_BY,CREATED_DATE)
  2  VALUES
  3  ('Reseq Group Consumer','NOT RUNNING',USER,LOCALTIMESTAMP);

1 row inserted.

Elapsed: 00:00:00.056
SQL>
SQL> COMMIT;

Commit complete.

Elapsed: 00:00:00.025
SQL> @@ZBR_RESEQUENCER_PKG_GET_GRP_REC.sql;
SQL> CREATE OR REPLACE TYPE ZBR_RESEQUENCER_PKG_GET_GRP_REC AS OBJECT
  2  (
  3  ID  NUMBER  ,
  4  GROUP_ID  VARCHAR2(1000)  ,
  5  PROCESS_ID  VARCHAR2(1000),
  6  TP_NAME     VARCHAR2(1000),
  7  COMPONENT_DN VARCHAR2(1000),
  8  ATTRIBUTE1 VARCHAR2(4000),
  9  ATTRIBUTE2 VARCHAR2(4000),
 10  ATTRIBUTE3 VARCHAR2(4000),
 11  ATTRIBUTE4 VARCHAR2(4000),
 12  ATTRIBUTE5 VARCHAR2(4000),
 13  ATTRIBUTE6 VARCHAR2(4000),
 14  ATTRIBUTE7 VARCHAR2(4000),
 15  ATTRIBUTE8 VARCHAR2(4000),
 16  ATTRIBUTE9 VARCHAR2(4000),
 17  ATTRIBUTE10 VARCHAR2(4000)
 18  );
 19  /

Type ZBR_RESEQUENCER_PKG_GET_GRP_REC compiled

Elapsed: 00:00:00.096
SQL> @@ZBR_RESEQUENCER_PKG_GET_MSG_REC.sql;
SQL> CREATE OR REPLACE TYPE ZBR_RESEQUENCER_PKG_GET_MSG_REC IS OBJECT(
  2  MSG CLOB,
  3  ID NUMBER,
  4  ATTRIBUTE1 VARCHAR2(4000),
  5  ATTRIBUTE2 VARCHAR2(4000),
  6  ATTRIBUTE3 VARCHAR2(4000),
  7  ATTRIBUTE4 VARCHAR2(4000),
  8  ATTRIBUTE5 VARCHAR2(4000),
  9  ATTRIBUTE6 VARCHAR2(4000),
 10  ATTRIBUTE7 VARCHAR2(4000),
 11  ATTRIBUTE8 VARCHAR2(4000),
 12  ATTRIBUTE9 VARCHAR2(4000),
 13  ATTRIBUTE10 VARCHAR2(4000)
 14  );
 15  /

Type ZBR_RESEQUENCER_PKG_GET_MSG_REC compiled

Elapsed: 00:00:00.092
SQL> @@ZBR_RESEQUENCER_PKG_CONTROL_TBL_REC.sql;
SQL> CREATE OR REPLACE TYPE ZBR_RESEQUENCER_PKG_CONTROL_TBL_REC IS OBJECT(
  2  PROCESS_ID	NUMBER,
  3  PROCESS_NAME	VARCHAR2(4000 BYTE),
  4  PROCESS_STATUS	VARCHAR2(4000 BYTE),
  5  CREATED_BY	VARCHAR2(4000 BYTE),
  6  CREATED_DATE	VARCHAR2(4000 BYTE),
  7  LAST_UPDATED_DATE	VARCHAR2(4000 BYTE)
  8  );
  9  /

Type ZBR_RESEQUENCER_PKG_CONTROL_TBL_REC compiled

Elapsed: 00:00:00.097
SQL> @@ZBR_RESEQUENCER_PKG_ATTRIBUTE_REC.sql;
SQL> CREATE OR REPLACE TYPE ZBR_RESEQUENCER_PKG_ATTRIBUTE_REC IS OBJECT(
  2  ATTRIBUTE1 VARCHAR2(4000),
  3  ATTRIBUTE2 VARCHAR2(4000),
  4  ATTRIBUTE3 VARCHAR2(4000),
  5  ATTRIBUTE4 VARCHAR2(4000),
  6  ATTRIBUTE5 VARCHAR2(4000),
  7  ATTRIBUTE6 VARCHAR2(4000),
  8  ATTRIBUTE7 VARCHAR2(4000),
  9  ATTRIBUTE8 VARCHAR2(4000),
 10  ATTRIBUTE9 VARCHAR2(4000),
 11  ATTRIBUTE10 VARCHAR2(4000));
 12  /

Type ZBR_RESEQUENCER_PKG_ATTRIBUTE_REC compiled

Elapsed: 00:00:00.087
SQL> @@ZBR_RESEQUENCER_PKG_TP_METADATA_REC.sql;
SQL> CREATE OR REPLACE TYPE ZBR_RESEQUENCER_PKG_TP_METADATA_REC IS OBJECT(
  2  ID	NUMBER,
  3  TP_ID	VARCHAR2(4000 BYTE),
  4  TP_NAME	VARCHAR2(4000 BYTE),
  5  COUNT	NUMBER,
  6  PROCESS_NAME	VARCHAR2(4000 BYTE),
  7  ACTIVE	VARCHAR2(4000 BYTE),
  8  TP_TIMEZONE	VARCHAR2(4000 BYTE),
  9  ATTRIBUTE1	VARCHAR2(4000 BYTE),
 10  ATTRIBUTE2	VARCHAR2(4000 BYTE),
 11  ATTRIBUTE3	VARCHAR2(4000 BYTE),
 12  ATTRIBUTE4	VARCHAR2(4000 BYTE),
 13  ATTRIBUTE5	VARCHAR2(4000 BYTE),
 14  ATTRIBUTE6	VARCHAR2(4000 BYTE),
 15  ATTRIBUTE7	VARCHAR2(4000 BYTE),
 16  ATTRIBUTE8	VARCHAR2(4000 BYTE),
 17  ATTRIBUTE9	VARCHAR2(4000 BYTE),
 18  ATTRIBUTE10	VARCHAR2(4000 BYTE)
 19  );
 20  /

Type ZBR_RESEQUENCER_PKG_TP_METADATA_REC compiled

Elapsed: 00:00:00.090
SQL> @@ZEB_RESEQUENCER_VB_MESSAGE_REC.sql;
SQL> CREATE OR REPLACE TYPE ZEB_RESEQUENCER_VB_MESSAGE_REC IS OBJECT(
  2  SL_NO                      VARCHAR2(4000),
  3  ID                         VARCHAR2(4000),
  4  OWNER_ID                   VARCHAR2(4000),
  5  COMPONENT_DN               VARCHAR2(4000),
  6  GROUP_ID                   VARCHAR2(4000),
  7  SOURCE_URI                 VARCHAR2(4000),
  8  PROCESS_ID                 VARCHAR2(4000),
  9  STATUS                     VARCHAR2(4000),
 10  STATUS_DESC                VARCHAR2(4000),
 11  CREATED_DATE               VARCHAR2(4000),
 12  LAST_UPDATED_TIME          VARCHAR2(4000),
 13  ERROR                      VARCHAR2(4000),
 14  OPERATION                  VARCHAR2(4000),
 15  LEVEL_DETAIL2              VARCHAR2(4000),
 16  NAME                       VARCHAR2(4000),
 17  TYPE                       VARCHAR2(4000),
 18  BIN                        CLOB,
 19  SEQUENCE_ID                VARCHAR2(4000),
 20  STANDARD_SEQUENCE_ID       VARCHAR2(4000),
 21  INSTANCE_CREATED           VARCHAR2(4000),
 22  TENANT_ID                  VARCHAR2(4000),
 23  FLOW_ID                    VARCHAR2(4000),
 24  CONTAINER_ID               VARCHAR2(4000),
 25  CREATED_BY                 VARCHAR2(4000),
 26  LAST_UPDATED_BY            VARCHAR2(4000),
 27  START_SEQUENCE_ID          VARCHAR2(4000),
 28  LAST_SEQUENCE_ID           VARCHAR2(4000),
 29  NEXT_SEQUENCE_ID           VARCHAR2(4000),
 30  TP_NAME                    VARCHAR2(4000),
 31  PICKED_DATE_TIME           VARCHAR2(4000),
 32  ATTRIBUTE1                 VARCHAR2(4000),
 33  ATTRIBUTE2                 VARCHAR2(4000),
 34  ATTRIBUTE3                 VARCHAR2(4000),
 35  ATTRIBUTE4                 VARCHAR2(4000),
 36  ATTRIBUTE5                 VARCHAR2(4000),
 37  ATTRIBUTE6                 VARCHAR2(4000),
 38  ATTRIBUTE7                 VARCHAR2(4000),
 39  ATTRIBUTE8                 VARCHAR2(4000),
 40  ATTRIBUTE9                 VARCHAR2(4000),
 41  ATTRIBUTE10                VARCHAR2(4000)
 42  );
 43  /

Type ZEB_RESEQUENCER_VB_MESSAGE_REC compiled

Elapsed: 00:00:00.104
SQL> @@ZEB_RESEQUENCER_VB_GROUP_REC.sql;
SQL> CREATE OR REPLACE TYPE ZEB_RESEQUENCER_VB_GROUP_REC IS OBJECT(
  2  SL_NO                   VARCHAR2(4000),
  3  ID                      VARCHAR2(4000),
  4  COMPONENT_DN            VARCHAR2(4000),
  5  OPERATION               VARCHAR2(4000),
  6  GROUP_ID                VARCHAR2(4000),
  7  ORDER_NUMBER            VARCHAR2(4000),
  8  PROCESS_ID              VARCHAR2(4000),
  9  STATUS                  VARCHAR2(4000),
 10  STATUS_DESC             VARCHAR2(4000),
 11  CREATED_DATE            VARCHAR2(4000),
 12  LAST_UPDATED_TIME       VARCHAR2(4000),
 13  ERROR                   VARCHAR2(4000),
 14  FLOW_ID                 VARCHAR2(4000),
 15  TP_NAME                 VARCHAR2(4000),
 16  CREATED_BY              VARCHAR2(4000),
 17  LAST_UPDATED_BY         VARCHAR2(4000),
 18  START_SEQUENCE_ID       VARCHAR2(4000),
 19  LAST_SEQUENCE_ID        VARCHAR2(4000),
 20  NEXT_SEQUENCE_ID        VARCHAR2(4000),
 21  LAST_RECEIVED_TIME      VARCHAR2(4000),
 22  RESEQUENCER_TYPE        VARCHAR2(4000),
 23  CONTAINER_ID            VARCHAR2(4000),
 24  TIMEOUT_DURATION        VARCHAR2(4000),
 25  ATTRIBUTE1              VARCHAR2(4000),
 26  ATTRIBUTE2              VARCHAR2(4000),
 27  ATTRIBUTE3              VARCHAR2(4000),
 28  ATTRIBUTE4              VARCHAR2(4000),
 29  ATTRIBUTE5              VARCHAR2(4000),
 30  ATTRIBUTE6              VARCHAR2(4000),
 31  ATTRIBUTE7              VARCHAR2(4000),
 32  ATTRIBUTE8              VARCHAR2(4000),
 33  ATTRIBUTE9              VARCHAR2(4000),
 34  ATTRIBUTE10             VARCHAR2(4000)
 35  );
 36  /

Type ZEB_RESEQUENCER_VB_GROUP_REC compiled

Elapsed: 00:00:00.102
SQL> @@ZBR_RESEQUENCER_PKG_MSG_REC.sql;
SQL> CREATE OR REPLACE TYPE  ZBR_RESEQUENCER_PKG_MSG_REC AS OBJECT(
  2  COMPONENT_DN	VARCHAR2(4000 BYTE),
  3  OPERATION	VARCHAR2(4000 BYTE),
  4  LEVEL_DETAIL2	VARCHAR2(4000 BYTE),
  5  GROUP_ID	VARCHAR2(4000 BYTE),
  6  NAME	VARCHAR2(4000 BYTE),
  7  TYPE	VARCHAR2(4000 BYTE),
  8  BIN	CLOB,
  9  SEQUENCE_ID	VARCHAR2(4000 BYTE),
 10  CREATED_DATE	VARCHAR2(4000 BYTE),
 11  SOURCE_URI	VARCHAR2(4000 BYTE),
 12  STANDARD_SEQUENCE_ID	VARCHAR2(4000 BYTE),
 13  STATUS	VARCHAR2(4000 BYTE),
 14  INSTANCE_CREATED	VARCHAR2(4000 BYTE),
 15  TENANT_ID	VARCHAR2(4000 BYTE),
 16  FLOW_ID	VARCHAR2(4000 BYTE),
 17  CONTAINER_ID	VARCHAR2(4000 BYTE),
 18  CREATED_BY	VARCHAR2(4000 BYTE),
 19  LAST_UPDATED_BY	VARCHAR2(4000 BYTE),
 20  START_SEQUENCE_ID	VARCHAR2(4000 BYTE),
 21  LAST_SEQUENCE_ID	VARCHAR2(4000 BYTE),
 22  NEXT_SEQUENCE_ID	VARCHAR2(4000 BYTE),
 23  LAST_UPDATED_TIME	VARCHAR2(4000 BYTE),
 24  PROCESS_ID	VARCHAR2(4000 BYTE),
 25  TP_NAME	VARCHAR2(4000 BYTE),
 26  ERROR	VARCHAR2(4000 BYTE),
 27  PICKED_DATE_TIME	VARCHAR2(4000 BYTE),
 28  ATTRIBUTE1	VARCHAR2(4000 BYTE),
 29  ATTRIBUTE2	VARCHAR2(4000 BYTE),
 30  ATTRIBUTE3	VARCHAR2(4000 BYTE),
 31  ATTRIBUTE4	VARCHAR2(4000 BYTE),
 32  ATTRIBUTE5	VARCHAR2(4000 BYTE),
 33  ATTRIBUTE6	VARCHAR2(4000 BYTE),
 34  ATTRIBUTE7	VARCHAR2(4000 BYTE),
 35  ATTRIBUTE8	VARCHAR2(4000 BYTE),
 36  ATTRIBUTE9	VARCHAR2(4000 BYTE),
 37  ATTRIBUTE10	VARCHAR2(4000 BYTE));
 38  /

Type ZBR_RESEQUENCER_PKG_MSG_REC compiled

Elapsed: 00:00:00.170
SQL> @@ZBR_RESEQUENCER_PKG_GET_GRP_LIST.sql;
SQL> CREATE OR REPLACE TYPE ZBR_RESEQUENCER_PKG_GET_GRP_LIST AS TABLE OF ZBR_RESEQUENCER_PKG_GET_GRP_REC;
  2  /

Type ZBR_RESEQUENCER_PKG_GET_GRP_LIST compiled

Elapsed: 00:00:00.087
SQL> @@ZBR_RESEQUENCER_PKG_GET_MSG_LIST.sql;
SQL> CREATE OR REPLACE TYPE ZBR_RESEQUENCER_PKG_GET_MSG_LIST IS TABLE OF ZBR_RESEQUENCER_PKG_GET_MSG_REC;
  2  /

Type ZBR_RESEQUENCER_PKG_GET_MSG_LIST compiled

Elapsed: 00:00:00.087
SQL> @@ZBR_RESEQUENCER_PKG_CONTROL_TBL_LIST.sql;
SQL> CREATE OR REPLACE TYPE ZBR_RESEQUENCER_PKG_CONTROL_TBL_LIST IS TABLE OF ZBR_RESEQUENCER_PKG_CONTROL_TBL_REC;
  2  /

Type ZBR_RESEQUENCER_PKG_CONTROL_TBL_LIST compiled

Elapsed: 00:00:00.085
SQL> @@ZBR_RESEQUENCER_PKG_ATTRIBUTE_LIST.sql;
SQL> CREATE OR REPLACE TYPE ZBR_RESEQUENCER_PKG_ATTRIBUTE_LIST IS TABLE OF ZBR_RESEQUENCER_PKG_ATTRIBUTE_REC;
  2  /

Type ZBR_RESEQUENCER_PKG_ATTRIBUTE_LIST compiled

Elapsed: 00:00:00.085
SQL> @@ZBR_RESEQUENCER_PKG_TP_METADATA_LIST.sql;
SQL> CREATE OR REPLACE TYPE ZBR_RESEQUENCER_PKG_TP_METADATA_LIST IS TABLE OF ZBR_RESEQUENCER_PKG_TP_METADATA_REC;
  2  /

Type ZBR_RESEQUENCER_PKG_TP_METADATA_LIST compiled

Elapsed: 00:00:00.085
SQL> @@ZEB_RESEQUENCER_VB_MESSAGE_LIST.sql;
SQL> CREATE OR REPLACE TYPE ZEB_RESEQUENCER_VB_MESSAGE_LIST IS TABLE OF ZEB_RESEQUENCER_VB_MESSAGE_REC;
  2  /

Type ZEB_RESEQUENCER_VB_MESSAGE_LIST compiled

Elapsed: 00:00:00.084
SQL> @@ZEB_RESEQUENCER_VB_GROUP_LIST.sql;
SQL> CREATE OR REPLACE TYPE ZEB_RESEQUENCER_VB_GROUP_LIST IS TABLE OF ZEB_RESEQUENCER_VB_GROUP_REC;
  2  /

Type ZEB_RESEQUENCER_VB_GROUP_LIST compiled

Elapsed: 00:00:00.090
SQL> @@ZBR_RESEQUENCER_PKG_MSG_LIST.sql;
SQL> CREATE OR REPLACE TYPE ZBR_RESEQUENCER_PKG_MSG_LIST AS TABLE OF ZBR_RESEQUENCER_PKG_MSG_REC;
  2  /

Type ZBR_RESEQUENCER_PKG_MSG_LIST compiled

Elapsed: 00:00:00.087
SQL> @@ZBR_RESEQUENCER_PKG_ID_LIST.sql;
SQL> CREATE OR REPLACE TYPE ZBR_RESEQUENCER_PKG_ID_LIST IS TABLE OF NUMBER;
  2  /

Type ZBR_RESEQUENCER_PKG_ID_LIST compiled

Elapsed: 00:00:00.088
SQL> @@ZBR_RESEQUENCER_PKG.sql;
SQL> CREATE OR REPLACE PACKAGE ZBR_RESEQUENCER_PKG AS
  2
  3  FUNCTION ZEB_CST_CONV(F_DATE IN VARCHAR2,F_TP_NAME IN VARCHAR2)	RETURN VARCHAR2;
  4  FUNCTION ZEB_GET_OWNER_ID(F_GID IN VARCHAR2,F_PID IN VARCHAR2) RETURN NUMBER;
  5  PROCEDURE ZBR_RESEQUENCER_INSERT_RESEQ_MSG(MSG_VAL IN ZBR_RESEQUENCER_PKG_MSG_LIST,P_STATUS OUT VARCHAR2,P_MSG OUT VARCHAR2,
  6  	P_GRP_CONSUMER_STATUS OUT VARCHAR2,P_OUT_VALUE OUT ZBR_RESEQUENCER_PKG_ATTRIBUTE_LIST);
  7  PROCEDURE ZBR_RESEQUENCER_UPDATE_RESEQ_GRP(P_LAST_UPDATED_BY IN VARCHAR2,P_STATUS OUT VARCHAR2,P_MSG OUT VARCHAR2);
  8  PROCEDURE ZBR_RESEQUENCER_GET_NEW_MSGS(P_MSG_CNT IN NUMBER,P_GRPID IN VARCHAR2,P_PROCESS_ID IN VARCHAR2,P_LAST_UPDATED_BY IN VARCHAR2,
  9  	P_IN_VALUE IN ZBR_RESEQUENCER_PKG_ATTRIBUTE_LIST,P_MSG_ID OUT ZBR_RESEQUENCER_PKG_GET_MSG_LIST);
 10  PROCEDURE ZBR_RESEQUENCER_GET_NEW_GRPS(P_GRP_CNT IN NUMBER,P_LAST_UPDATED_BY IN VARCHAR2,P_IN_VALUE IN ZBR_RESEQUENCER_PKG_ATTRIBUTE_LIST,
 11  	P_RECORD OUT ZBR_RESEQUENCER_PKG_GET_GRP_LIST,P_GRP_AVL_CNT OUT NUMBER);
 12  PROCEDURE ZBR_RESEQUENCER_UPDATE_STATUS(P_GRP_ID IN VARCHAR2,P_PROCESS_ID IN VARCHAR2,P_ID IN NUMBER,P_ERROR IN VARCHAR2,
 13  	P_OIC_STATUS IN VARCHAR2,P_LAST_UPDATED_BY IN VARCHAR2,P_FLOW_ID IN VARCHAR2,P_IN_VALUE IN ZBR_RESEQUENCER_PKG_ATTRIBUTE_LIST,
 14  	P_TAB_NAME IN VARCHAR2 DEFAULT NULL,P_PENDING_MSG_CNT OUT NUMBER ,P_STATUS OUT VARCHAR2,P_MSG OUT VARCHAR2,P_GRP_CONSUMER_STATUS OUT VARCHAR2,
 15  	P_OUT_VALUE OUT ZBR_RESEQUENCER_PKG_ATTRIBUTE_LIST);
 16  PROCEDURE ZBR_RESEQUENCER_TABLE_PURGE(p_status out varchar2,P_MSG OUT VARCHAR2,p_purge_days in number default 90,p_limit in number default 100);
 17  PROCEDURE ZBR_RESEQENCER_VB_GET_GROUPS(P_GROUP_LIST OUT ZEB_RESEQUENCER_VB_GROUP_LIST,P_STATUS OUT VARCHAR2,P_MSG OUT VARCHAR2,
 18  	P_ADDITIONAL_FILTER IN VARCHAR2 DEFAULT NULL);
 19  PROCEDURE ZBR_RESEQENCER_VB_GET_MESSAGE(P_IN_VALUE IN ZBR_RESEQUENCER_PKG_ATTRIBUTE_REC,P_MESSAGE_LIST OUT ZEB_RESEQUENCER_VB_MESSAGE_LIST,P_STATUS OUT VARCHAR2,P_MSG OUT VARCHAR2);
 20  PROCEDURE ZBR_RESEQUENCER_UPDATE_STATUS_JAVA(P_GRP_ID IN VARCHAR2,P_PROCESS_ID IN VARCHAR2,P_ID IN NUMBER,P_ERROR IN VARCHAR2,
 21  	P_OIC_STATUS IN VARCHAR2,P_LAST_UPDATED_BY IN VARCHAR2,P_FLOW_ID IN VARCHAR2, P_TAB_NAME IN VARCHAR2 DEFAULT NULL,
 22  	P_PENDING_MSG_CNT OUT NUMBER ,P_STATUS OUT VARCHAR2,P_MSG OUT VARCHAR2,P_GRP_CONSUMER_STATUS OUT VARCHAR2);
 23  PROCEDURE ZBR_RESEQUENCER_UPDATE_STATUS_VB(P_ACTION IN VARCHAR2,P_RESUBMIT_CNT IN NUMBER DEFAULT 10,P_STATUS_VBCS IN VARCHAR2 DEFAULT '7',
 24  	P_COMPONENT_DN VARCHAR2,P_GRP_LIST VARCHAR2,P_GROUP_LIST_VB OUT ZEB_RESEQUENCER_VB_GROUP_LIST,P_STATUS OUT VARCHAR2,P_MSG OUT VARCHAR2,
 25  	P_GRP_CONSUMER_STATUS OUT VARCHAR2,P_ADDITIONAL_FILTER IN VARCHAR2 DEFAULT NULL);
 26  PROCEDURE ZBR_RESEQENCER_VB_GET_PAYLOAD(P_IN_VALUE IN ZBR_RESEQUENCER_PKG_ATTRIBUTE_REC,P_MESSAGE_LIST OUT ZBR_RESEQUENCER_PKG_GET_MSG_LIST,
 27  	P_STATUS OUT VARCHAR2,P_MSG OUT VARCHAR2);
 28  PROCEDURE ZBR_RESEQENCER_VB_GET_CONTROL_TP_TBL(P_CONTROL_TBL OUT ZBR_RESEQUENCER_PKG_CONTROL_TBL_LIST,P_TP_TBL IN OUT ZBR_RESEQUENCER_PKG_TP_METADATA_LIST,
 29  	P_STATUS OUT VARCHAR2,P_MSG OUT VARCHAR2,P_ACTION IN VARCHAR2 DEFAULT NULL);
 30  END ZBR_RESEQUENCER_PKG;
 31  /

Package ZBR_RESEQUENCER_PKG compiled

Elapsed: 00:00:00.127
SQL> CREATE OR REPLACE PACKAGE BODY ZBR_RESEQUENCER_PKG AS
  2
  3  /*===================================================================================================================================
  4     The purpose of this code is to build Re-Sequencer Functionality. Procedures will receive input from OIC and load into tables. Procedures will also fetch
  5     data from tables and gives back to OIC.
  6
  7      DEVELOPED BY:   ASHISH KUMAR    VERSION    1.0     DATE: 06/12/2018 0655 PM
  8  	DEVELOPED BY:   ASHISH KUMAR    VERSION    2.0     DATE: 20/12/2018 0735 PM
  9  	DEVELOPED BY:   ASHISH KUMAR    VERSION    3.0     DATE: 21/12/2018 0735 PM
 10  	DEVELOPED BY:   ASHISH KUMAR    VERSION    4.0     DATE: 03/01/2019 0400 PM 	Implemented explicit Types to avoid Wrapper pkg
 11  	DEVELOPED BY:   ASHISH KUMAR    VERSION    5.0     DATE: 09/01/2019 1253 PM 	Calling Update Grp proc Inside Get Grp proc
 12  	DEVELOPED BY:   ASHISH KUMAR    VERSION    6.0     DATE: 21/01/2019 0610 PM 	Added CreatedBy and LastUpdatedBy in Grp and Msg Tables.
 13  	DEVELOPED BY:   ASHISH KUMAR    VERSION    7.0     DATE: 23/01/2019 0610 PM 	Added Changes suggested By Client Oracle Team.
 14  	DEVELOPED BY:   ASHISH KUMAR    VERSION    7.1     DATE: 30/01/2019 0537 PM 	Added DB Time Zone Conversion while Data Insert and Date format Change.
 15  	DEVELOPED BY:   ASHISH KUMAR    VERSION    7.2     DATE: 08/02/2019 0333 PM		Procedure RESEQ INSERT is fine tuned,Function GetOwnerId,ToCST added.
 16  	DEVELOPED BY:   ASHISH KUMAR    VERSION    7.3     DATE: 12/02/2019 0628 PM		Additional I/P O/P parameter added to procedures.
 17      DEVELOPED BY:   ASHISH KUMAR    VERSION    7.4     DATE: 19/02/2019 0526 PM		Modified Procedure Update Status to handle Abort and Resubmit.
 18  	DEVELOPED BY:   ASHISH KUMAR    VERSION    7.5     DATE: 22/02/2019 0230 PM		Added Procedure ZBR_RESEQENCER_VB_GET_GROUPS,ZBR_RESEQENCER_VB_GET_MESSAGE
 19  	DEVELOPED BY:   ASHISH KUMAR    VERSION    7.6     DATE: 25/02/2019 0332 PM		Added Procedure ZBR_RESEQUENCER_UPDATE_STATUS_JAVA
 20  	DEVELOPED BY:   ASHISH KUMAR    VERSION    7.7     DATE: 02/04/2019 0116 AM		Changed Update Group Logic to oldest date from Msg table,after the 1st Review with Anil.
 21  	DEVELOPED BY:   ASHISH KUMAR    VERSION    7.8     DATE: 26/04/2019 0410 PM		Added procedure ZBR_RESEQUENCER_UPDATE_STATUS_VB and Added P_GRP_CONSUMER_STATUS OUT parameter in UPDATE_STATUS proc.
 22  	DEVELOPED BY:   ASHISH KUMAR    VERSION    7.9     DATE: 03/05/2019 0630 PM		Added procedure ZBR_RESEQENCER_VB_GET_PAYLOAD and ZBR_RESEQENCER_VB_GET_CONTROL_TP_TBL
 23  	DEVELOPED BY:   ASHISH KUMAR    VERSION    8.0     DATE: 09/05/2019 0400 PM		Added logic of checking In progress Process count and then manipulating Metadata Count, for get group proc. As per review comment by Anil.
 24  	DEVELOPED BY:   ASHISH KUMAR    VERSION    8.1     DATE: 04/06/2019 0314 PM		Added ATTRIBUTE1 in GET_NEW_MSG proc.
 25  	DEVELOPED BY:   ASHISH KUMAR    VERSION    8.2     DATE: 25/07/2019 0314 PM		Added SEARCH & MERGE in ZBR_RESEQUENCER_UPDATE_STATUS_VB procedure.
 26  =====================================================================================================================================*/
 27
 28  FUNCTION ZEB_CST_CONV(F_DATE IN VARCHAR2,F_TP_NAME IN VARCHAR2)
 29  		RETURN VARCHAR2
 30  		AS
 31  		TP_TZ VARCHAR2(200);
 32  	BEGIN
 33  		SELECT TP_TIMEZONE INTO TP_TZ FROM ZEB_RESEQUENCER_TP_METADATA WHERE TP_NAME=F_TP_NAME;
 34  		RETURN TO_CHAR(FROM_TZ(TO_TIMESTAMP(F_DATE,'MM/DD/YYYY HH24:MI:SS.FF'), TP_TZ) AT TIME ZONE 'AMERICA/CHICAGO','YYYYMMDDHH24MISSFF3');
 35  	END;
 36
 37  	FUNCTION ZEB_GET_OWNER_ID(F_GID IN VARCHAR2,F_PID IN VARCHAR2)
 38  		RETURN NUMBER
 39  		AS
 40  		L_OWNER_ID NUMBER;
 41  	BEGIN
 42  		SELECT ID INTO L_OWNER_ID FROM ZEB_RESEQUENCER_GROUP WHERE GROUP_ID=F_GID AND PROCESS_ID=F_PID;
 43  		RETURN L_OWNER_ID;
 44  	END;
 45
 46  	PROCEDURE ZBR_RESEQUENCER_INSERT_RESEQ_MSG(MSG_VAL IN ZBR_RESEQUENCER_PKG_MSG_LIST,P_STATUS OUT VARCHAR2,P_MSG OUT VARCHAR2,
 47  				P_GRP_CONSUMER_STATUS OUT VARCHAR2,P_OUT_VALUE OUT ZBR_RESEQUENCER_PKG_ATTRIBUTE_LIST) AS
 48
 49  		/*This procedure will receive data from OIC in table type input and Load into Group and Message table. It will return the status and message
 50  			of the transaction.It will also return Group Consumer Process status from Control table*/
 51
 52  		L_STATUS   VARCHAR2(10);
 53  		L_MSG      VARCHAR2(2000);
 54  		L_GRP_CONSUMER_STATUS VARCHAR2(100);
 55
 56  	BEGIN
 57  			FORALL I IN MSG_VAL.FIRST..MSG_VAL.LAST
 58  			INSERT  /*+ IGNORE_ROW_ON_DUPKEY_INDEX (ZEB_RESEQUENCER_GROUP (group_id,process_id)) */ into ZEB_RESEQUENCER_GROUP
 59  				(COMPONENT_DN,
 60  				OPERATION,
 61  				GROUP_ID,
 62  				PROCESS_ID,
 63  				TP_NAME,
 64  				STATUS,
 65  				LAST_UPDATED_TIME,
 66  				CREATED_DATE,
 67  				CONTAINER_ID,
 68  				CREATED_BY,
 69  				LAST_UPDATED_BY,
 70  				FLOW_ID)
 71  					VALUES
 72  				(MSG_VAL(I).COMPONENT_DN,
 73  				MSG_VAL(I).OPERATION,
 74  				MSG_VAL(I).GROUP_ID,
 75  				MSG_VAL(I).PROCESS_ID,
 76  				MSG_VAL(I).TP_NAME,
 77  				'N',
 78  				zeb_cst_conv(MSG_VAL(I).CREATED_DATE,MSG_VAL(I).SOURCE_URI)	,
 79  				zeb_cst_conv(MSG_VAL(I).CREATED_DATE,MSG_VAL(I).SOURCE_URI)	,
 80  				MSG_VAL(I).CONTAINER_ID,
 81  				MSG_VAL(I).CREATED_BY,
 82  				MSG_VAL(I).LAST_UPDATED_BY,
 83  				MSG_VAL(I).FLOW_ID);
 84
 85  				COMMIT;
 86
 87  			FORALL I IN MSG_VAL.FIRST..MSG_VAL.LAST
 88  			INSERT INTO ZEB_RESEQUENCER_MESSAGE(
 89  			OWNER_ID			 ,
 90  			COMPONENT_DN		 ,
 91  			OPERATION			 ,
 92  			LEVEL_DETAIL2		 ,
 93  			GROUP_ID			 ,
 94  			NAME				 ,
 95  			TYPE		  		 ,
 96  			BIN		  			 ,
 97  			SEQUENCE_ID			 ,
 98  			CREATED_DATE		 ,
 99  			SOURCE_URI			 ,
100  			STANDARD_SEQUENCE_ID ,
101  			STATUS				 ,
102  			INSTANCE_CREATED	 ,
103  			TENANT_ID			 ,
104  			FLOW_ID				 ,
105  			ATTRIBUTE1			 ,
106  			ATTRIBUTE2			 ,
107  			ATTRIBUTE3			 ,
108  			ATTRIBUTE4			 ,
109  			ATTRIBUTE5			 ,
110  			ATTRIBUTE6			 ,
111  			ATTRIBUTE7			 ,
112  			ATTRIBUTE8			 ,
113  			ATTRIBUTE9			 ,
114  			ATTRIBUTE10		 	 ,
115  			START_SEQUENCE_ID  	 ,
116  			LAST_SEQUENCE_ID   	 ,
117  			NEXT_SEQUENCE_ID   	 ,
118  			LAST_UPDATED_TIME,
119  			PROCESS_ID,
120  			TP_NAME,
121  			CONTAINER_ID,
122  			CREATED_BY,
123  			LAST_UPDATED_BY)
124  			VALUES(
125  			ZEB_GET_OWNER_ID(MSG_VAL(I).GROUP_ID,MSG_VAL(I).PROCESS_ID),
126  			MSG_VAL(I).COMPONENT_DN		    ,
127  			MSG_VAL(I).OPERATION			,
128  			MSG_VAL(I).LEVEL_DETAIL2		,
129  			MSG_VAL(I).GROUP_ID			    ,
130  			MSG_VAL(I).NAME				    ,
131  			MSG_VAL(I).TYPE		  		    ,
132  			MSG_VAL(I).BIN		  			,
133  			MSG_VAL(I).SEQUENCE_ID			,
134  			ZEB_CST_CONV(MSG_VAL(I).CREATED_DATE,MSG_VAL(I).SOURCE_URI)		,
135  			MSG_VAL(I).SOURCE_URI			,
136  			MSG_VAL(I).STANDARD_SEQUENCE_ID ,
137  			MSG_VAL(I).STATUS				,
138  			MSG_VAL(I).INSTANCE_CREATED	    ,
139  			MSG_VAL(I).TENANT_ID			,
140  			MSG_VAL(I).FLOW_ID				,
141  			MSG_VAL(I).ATTRIBUTE1			,
142  			MSG_VAL(I).ATTRIBUTE2			,
143  			MSG_VAL(I).ATTRIBUTE3			,
144  			MSG_VAL(I).ATTRIBUTE4			,
145  			MSG_VAL(I).ATTRIBUTE5			,
146  			MSG_VAL(I).ATTRIBUTE6			 ,
147  			MSG_VAL(I).ATTRIBUTE7			 ,
148  			MSG_VAL(I).ATTRIBUTE8			 ,
149  			MSG_VAL(I).ATTRIBUTE9			 ,
150  			MSG_VAL(I).ATTRIBUTE10		 ,
151  			MSG_VAL(I).START_SEQUENCE_ID  	,
152  			MSG_VAL(I).LAST_SEQUENCE_ID   	,
153  			MSG_VAL(I).NEXT_SEQUENCE_ID   	,
154  			ZEB_CST_CONV(MSG_VAL(I).CREATED_DATE,MSG_VAL(I).SOURCE_URI),
155  			MSG_VAL(I).PROCESS_ID,
156  			MSG_VAL(I).TP_NAME,
157  			MSG_VAL(I).CONTAINER_ID,
158  			MSG_VAL(I).CREATED_BY,
159  			MSG_VAL(I).LAST_UPDATED_BY);
160
161  			COMMIT;
162
163  			SELECT PROCESS_STATUS INTO L_GRP_CONSUMER_STATUS FROM ZEB_RESEQ_CONTROL_TBL WHERE UPPER(PROCESS_NAME)='RESEQ GROUP CONSUMER';
164
165  				L_MSG := 'RECORD INSERTED SUCCESSFULLY';
166  				L_STATUS:='SUCCESS';
167  				P_STATUS:=L_STATUS;
168  				P_MSG:=L_MSG;
169  				P_GRP_CONSUMER_STATUS:=L_GRP_CONSUMER_STATUS;
170  				P_OUT_VALUE:=NULL;
171
172  			EXCEPTION
173  				WHEN OTHERS THEN
174  				L_MSG := ' UNEXPECTED ERROR OCCURED WHILE INSERTING INTO ZEB_RESEQUENCER_MESSAGE: '|| SQLERRM;
175  				L_STATUS:='ERROR';
176  				P_STATUS:=L_STATUS;
177  				P_MSG:=L_MSG;
178  				P_OUT_VALUE:=NULL;
179
180  	END ZBR_RESEQUENCER_INSERT_RESEQ_MSG;
181
182  	PROCEDURE ZBR_RESEQUENCER_UPDATE_RESEQ_GRP(P_LAST_UPDATED_BY IN VARCHAR2,P_STATUS OUT VARCHAR2,P_MSG OUT VARCHAR2) AS
183
184  	/*This procedure will reset the status in Group table if any new message arrives for the Completed Group_id. */
185
186  		L_STATUS       VARCHAR2(10) :=NULL;
187  		L_MSG      VARCHAR2(2000);
188  		CURSOR L_CURSOR IS SELECT OWNER_ID,MIN(CREATED_DATE) AS CREATED_DATE FROM ZEB_RESEQUENCER_MESSAGE WHERE STATUS=0 GROUP BY OWNER_ID;
189
190  	BEGIN
191  			FOR I IN L_CURSOR LOOP
192  				UPDATE ZEB_RESEQUENCER_GROUP
193  				SET STATUS =(CASE WHEN STATUS='C' THEN 'N' ELSE STATUS END  ),
194  						LAST_UPDATED_TIME=TO_CHAR(LOCALTIMESTAMP AT TIME ZONE 'AMERICA/CHICAGO','YYYYMMDDHH24MISSFF3'),
195                          CREATED_DATE=I.CREATED_DATE,
196  						LAST_UPDATED_BY=P_LAST_UPDATED_BY
197  						WHERE ID=I.OWNER_ID;
198  			END LOOP;
199  			 COMMIT;
200
201  				L_MSG := 'RECORD UPDATED SUCCESSFULLY';
202  				L_STATUS:='SUCCESS';
203  				P_STATUS:=L_STATUS;
204  				P_MSG:=L_MSG;
205
206  			EXCEPTION
207  				WHEN OTHERS THEN
208  				L_MSG := ' UNEXPECTED ERROR OCCURED WHILE UPDATING ZEB_RESEQUENCER_GROUP: '|| SQLERRM;
209  				L_STATUS:='ERROR';
210  				P_STATUS:=L_STATUS;
211  				P_MSG:=L_MSG;
212
213  	END ZBR_RESEQUENCER_UPDATE_RESEQ_GRP;
214
215  	PROCEDURE ZBR_RESEQUENCER_GET_NEW_GRPS(P_GRP_CNT IN NUMBER,P_LAST_UPDATED_BY IN VARCHAR2,P_IN_VALUE IN ZBR_RESEQUENCER_PKG_ATTRIBUTE_LIST,
216  	P_RECORD OUT ZBR_RESEQUENCER_PKG_GET_GRP_LIST,P_GRP_AVL_CNT OUT NUMBER) AS
217
218  			/*This procedure will return the new Groups for processing. The max no of groups in Process is restrict to 40. It will also change the status
219  			 of the picked group.*/
220
221  			L_IN_PROCESS_CNT NUMBER:=0;
222  			L_TO_BE_PROCESS_CNT NUMBER:=0;
223  			L_NEW_GRP_CNT NUMBER:=0;
224  			L_UPD_STATUS VARCHAR2(20);
225  			L_UPD_MSG VARCHAR2(4000);
226  	BEGIN
227  			ZBR_RESEQUENCER_UPDATE_RESEQ_GRP(P_LAST_UPDATED_BY,L_UPD_STATUS,L_UPD_MSG);
228  			DBMS_OUTPUT.PUT_LINE(L_UPD_STATUS||' : '||L_UPD_MSG);
229
230  				SELECT COUNT(GROUP_ID) INTO L_IN_PROCESS_CNT FROM ZEB_RESEQUENCER_GROUP WHERE STATUS='P';
231  				SELECT COUNT(GROUP_ID) INTO L_NEW_GRP_CNT FROM ZEB_RESEQUENCER_GROUP WHERE STATUS='N';
232  				L_TO_BE_PROCESS_CNT:=P_GRP_CNT-L_IN_PROCESS_CNT;
233  	IF (L_TO_BE_PROCESS_CNT>0 AND L_NEW_GRP_CNT>0) THEN
234  		WITH IN_PROCESS_GROUP AS(
235  		SELECT PROCESS_ID,COUNT(1) IN_PROCESS FROM ZEB_RESEQUENCER_GROUP
236  		WHERE STATUS='P'
237  		GROUP BY PROCESS_ID
238  		),
239  		TP_METADATA AS(
240  		SELECT TP_NAME,COUNT-NVL(IN_PROCESS,0) AVL_PROCESS_CNT FROM ZEB_RESEQUENCER_TP_METADATA M
241  		LEFT JOIN IN_PROCESS_GROUP D ON M.TP_NAME=D.PROCESS_ID
242  		WHERE M.ACTIVE='Y'
243  		)
244  		SELECT ZBR_RESEQUENCER_PKG_GET_GRP_REC(ID,GROUP_ID,PROCESS_ID,TP_NAME,COMPONENT_DN,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL)
245  			BULK COLLECT INTO P_RECORD
246  			FROM(SELECT ID,GROUP_ID,PROCESS_ID,TP_NAME,COMPONENT_DN,CREATED_DATE
247  				 FROM 	(SELECT G.ID,G.GROUP_ID,G.PROCESS_ID,G.TP_NAME,G.COMPONENT_DN,G.CREATED_DATE,
248  										ROW_NUMBER() OVER(PARTITION BY G.PROCESS_ID ORDER BY G.CREATED_DATE) RN	,M.AVL_PROCESS_CNT
249  						 FROM ZEB_RESEQUENCER_GROUP G INNER JOIN TP_METADATA M ON G.PROCESS_ID=M.TP_NAME
250  						 WHERE G.STATUS='N'
251  						 AND FROM_TZ(TO_TIMESTAMP(G.CREATED_DATE,'YYYYMMDDHH24MISSFF3'),'AMERICA/CHICAGO')<=SYSTIMESTAMP AT TIME ZONE 'AMERICA/CHICAGO'-INTERVAL '2' SECOND
252  						)
253  				 WHERE RN<=AVL_PROCESS_CNT ORDER BY CREATED_DATE
254  				 )
255  			WHERE ROWNUM<=L_TO_BE_PROCESS_CNT;
256
257  			FORALL I IN P_RECORD.FIRST..P_RECORD.LAST
258  				UPDATE ZEB_RESEQUENCER_GROUP
259  				SET STATUS='P', LAST_UPDATED_TIME=TO_CHAR(LOCALTIMESTAMP AT TIME ZONE 'AMERICA/CHICAGO','YYYYMMDDHH24MISSFF3')
260  				WHERE ID=P_RECORD(I).ID;
261  			COMMIT;
262
263  			UPDATE ZEB_RESEQ_CONTROL_TBL
264  			SET PROCESS_STATUS=(CASE WHEN UPPER(PROCESS_STATUS)='NOT RUNNING' THEN 'RUNNING' ELSE PROCESS_STATUS END)
265  			WHERE UPPER(PROCESS_NAME)='RESEQ GROUP CONSUMER';
266  			COMMIT;
267  	ELSE
268  			UPDATE ZEB_RESEQ_CONTROL_TBL SET PROCESS_STATUS='NOT RUNNING' WHERE UPPER(PROCESS_NAME)='RESEQ GROUP CONSUMER';
269  			COMMIT;
270  			DBMS_OUTPUT.PUT_LINE('NO NEW MESSAGES AVAILABLE');
271              --P_RECORD:=ZBR_RESEQUENCER_PKG_GET_GRP_LIST(NULL);
272  	END IF;
273  			SELECT COUNT(GROUP_ID) INTO P_GRP_AVL_CNT FROM ZEB_RESEQUENCER_GROUP WHERE STATUS='N';
274  	END ZBR_RESEQUENCER_GET_NEW_GRPS;
275
276  	PROCEDURE ZBR_RESEQUENCER_GET_NEW_MSGS(P_MSG_CNT IN NUMBER,P_GRPID IN VARCHAR2,P_PROCESS_ID IN VARCHAR2,P_LAST_UPDATED_BY IN VARCHAR2,
277  	P_IN_VALUE IN ZBR_RESEQUENCER_PKG_ATTRIBUTE_LIST,P_MSG_ID OUT ZBR_RESEQUENCER_PKG_GET_MSG_LIST)
278  			AS
279
280  			/*This procedure will return the CLOB payload for processing, from Message table of the respective Group returned by Get Group Procedure.
281  			It will also change the status of the record.	*/
282
283  			BEGIN
284  			SELECT  ZBR_RESEQUENCER_PKG_GET_MSG_REC(BIN,ID,ATTRIBUTE1,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL) BULK COLLECT INTO P_MSG_ID  FROM(
285  			SELECT BIN,ID,ATTRIBUTE1,RANK() OVER(PARTITION BY GROUP_ID,PROCESS_ID ORDER BY CREATED_DATE) RNK,CREATED_DATE
286  			FROM ZEB_RESEQUENCER_MESSAGE
287  			WHERE GROUP_ID=P_GRPID AND PROCESS_ID=P_PROCESS_ID AND  STATUS='0'
288  			 ) WHERE RNK<=P_MSG_CNT AND
289  			FROM_TZ(TO_TIMESTAMP(CREATED_DATE,'YYYYMMDDHH24MISSFF3'),'AMERICA/CHICAGO')<=SYSTIMESTAMP AT TIME ZONE 'AMERICA/CHICAGO'-INTERVAL '2' SECOND
290  			 ORDER BY RNK;
291
292
293              FOR I IN P_MSG_ID.FIRST..P_MSG_ID.LAST LOOP
294  			UPDATE ZEB_RESEQUENCER_MESSAGE
295  			SET STATUS=2,
296  			LAST_UPDATED_TIME=TO_CHAR(LOCALTIMESTAMP AT TIME ZONE 'AMERICA/CHICAGO','YYYYMMDDHH24MISSFF3'),
297  			LAST_UPDATED_BY=P_LAST_UPDATED_BY,
298  			PICKED_DATE_TIME=TO_CHAR(LOCALTIMESTAMP AT TIME ZONE 'AMERICA/CHICAGO','YYYYMMDDHH24MISSFF3')
299  			WHERE ID=P_MSG_ID(I).ID;
300
301  			COMMIT;
302              END LOOP;
303
304  			EXCEPTION
305  			WHEN OTHERS THEN
306  			DBMS_OUTPUT.PUT_LINE('UNEXPECTED ERROR OCCURED: '||SQLERRM);
307
308  	END ZBR_RESEQUENCER_GET_NEW_MSGS;
309
310  	PROCEDURE ZBR_RESEQUENCER_UPDATE_STATUS(P_GRP_ID IN VARCHAR2,P_PROCESS_ID IN VARCHAR2,P_ID IN NUMBER,P_ERROR IN VARCHAR2
311  	,P_OIC_STATUS IN VARCHAR2,P_LAST_UPDATED_BY IN VARCHAR2,P_FLOW_ID IN VARCHAR2,P_IN_VALUE IN ZBR_RESEQUENCER_PKG_ATTRIBUTE_LIST,
312  	P_TAB_NAME IN VARCHAR2 DEFAULT NULL,P_PENDING_MSG_CNT OUT NUMBER ,P_STATUS OUT VARCHAR2,P_MSG OUT VARCHAR2,P_GRP_CONSUMER_STATUS OUT VARCHAR2,
313  	P_OUT_VALUE OUT ZBR_RESEQUENCER_PKG_ATTRIBUTE_LIST) AS
314
315  	/*This procedure will Update the Status in Group and Message table.  */
316
317
318  		L_STATUS VARCHAR2(15);
319  		L_MSG VARCHAR2(2000);
320  		L_GRP_CONSUMER_STATUS VARCHAR2(100);
321  		BEGIN
322  		IF UPPER(P_TAB_NAME)='ZEB_RESEQUENCER_GROUP' THEN
323  		UPDATE ZEB_RESEQUENCER_GROUP
324  			SET STATUS=P_OIC_STATUS,
325  			LAST_UPDATED_TIME=TO_CHAR(LOCALTIMESTAMP AT TIME ZONE 'AMERICA/CHICAGO','YYYYMMDDHH24MISSFF3'),
326  			ERROR=P_ERROR,
327  			FLOW_ID=P_FLOW_ID,
328  			LAST_UPDATED_BY=P_LAST_UPDATED_BY
329  			WHERE GROUP_ID=P_GRP_ID AND PROCESS_ID=P_PROCESS_ID;
330  			COMMIT;
331
332  			L_STATUS:='SUCCESS';
333  			L_MSG:='STATUS UPDATED IN ZEB_RESEQUENCER_GROUP TABLE';
334  		ELSE
335  		BEGIN
336  		IF P_OIC_STATUS='1' THEN
337  			UPDATE ZEB_RESEQUENCER_MESSAGE
338  			SET STATUS='1',
339  			LAST_UPDATED_TIME=TO_CHAR(LOCALTIMESTAMP AT TIME ZONE 'AMERICA/CHICAGO','YYYYMMDDHH24MISSFF3'),
340  			ERROR=P_ERROR,
341  			FLOW_ID=P_FLOW_ID,
342  			LAST_UPDATED_BY=P_LAST_UPDATED_BY
343  			WHERE ID=P_ID;
344  			COMMIT;
345  			SELECT COUNT(*) INTO P_PENDING_MSG_CNT FROM ZEB_RESEQUENCER_MESSAGE WHERE STATUS='0' AND GROUP_ID=P_GRP_ID AND PROCESS_ID=P_PROCESS_ID;
346  				IF P_PENDING_MSG_CNT=0 THEN
347  					UPDATE ZEB_RESEQUENCER_GROUP
348  					SET STATUS='C',
349  					LAST_UPDATED_TIME=TO_CHAR(LOCALTIMESTAMP AT TIME ZONE 'AMERICA/CHICAGO','YYYYMMDDHH24MISSFF3'),
350  					ERROR=P_ERROR,
351  					FLOW_ID=P_FLOW_ID,
352  					LAST_UPDATED_BY=P_LAST_UPDATED_BY
353  					WHERE GROUP_ID=P_GRP_ID AND PROCESS_ID=P_PROCESS_ID;
354  					COMMIT;
355  				END IF;
356  			L_STATUS:='SUCCESS';
357  			L_MSG:=CASE WHEN P_PENDING_MSG_CNT=0 THEN 'STATUS UPDATED IN ZEB_RESEQUENCER_MESSAGE/GROUP TABLE'
358  							ELSE 'STATUS UPDATED IN ZEB_RESEQUENCER_MESSAGE TABLE' END;
359  		ELSIF 	P_OIC_STATUS='3' THEN
360  			UPDATE ZEB_RESEQUENCER_MESSAGE
361  			SET STATUS='3',
362  			LAST_UPDATED_TIME=TO_CHAR(LOCALTIMESTAMP AT TIME ZONE 'AMERICA/CHICAGO','YYYYMMDDHH24MISSFF3'),
363  			ERROR=P_ERROR,
364  			FLOW_ID=P_FLOW_ID,
365  			LAST_UPDATED_BY=P_LAST_UPDATED_BY
366  			WHERE ID=P_ID;
367
368  			UPDATE ZEB_RESEQUENCER_GROUP
369  			SET STATUS='E',
370  			LAST_UPDATED_TIME=TO_CHAR(LOCALTIMESTAMP AT TIME ZONE 'AMERICA/CHICAGO','YYYYMMDDHH24MISSFF3'),
371  			ERROR=P_ERROR,
372  			FLOW_ID=P_FLOW_ID,
373  			LAST_UPDATED_BY=P_LAST_UPDATED_BY
374  			WHERE GROUP_ID=P_GRP_ID AND PROCESS_ID=P_PROCESS_ID;
375  			COMMIT;
376
377  			L_STATUS:='SUCCESS';
378  			L_MSG:='STATUS UPDATED IN ZEB_RESEQUENCER_MESSAGE/GROUP TABLE';
379  			/* ABORT*/
380  		ELSIF 	P_OIC_STATUS='4' THEN
381  			UPDATE ZEB_RESEQUENCER_MESSAGE
382  			SET STATUS='4',
383  			LAST_UPDATED_TIME=TO_CHAR(LOCALTIMESTAMP AT TIME ZONE 'AMERICA/CHICAGO','YYYYMMDDHH24MISSFF3'),
384  			ERROR=NULL,
385  			FLOW_ID=P_FLOW_ID,
386  			LAST_UPDATED_BY=P_LAST_UPDATED_BY
387  			WHERE ID=P_ID;
388
389  			UPDATE ZEB_RESEQUENCER_GROUP
390  			SET STATUS='C',
391  			LAST_UPDATED_TIME=TO_CHAR(LOCALTIMESTAMP AT TIME ZONE 'AMERICA/CHICAGO','YYYYMMDDHH24MISSFF3'),
392  			ERROR=P_ERROR,
393  			FLOW_ID=P_FLOW_ID,
394  			LAST_UPDATED_BY=P_LAST_UPDATED_BY
395  			WHERE GROUP_ID=P_GRP_ID AND PROCESS_ID=P_PROCESS_ID;
396  			COMMIT;
397
398  			L_STATUS:='SUCCESS';
399  			L_MSG:='STATUS UPDATED IN ZEB_RESEQUENCER_MESSAGE/GROUP TABLE';
400  			/* RESUBMIT*/
401  		ELSIF 	P_OIC_STATUS='5' THEN
402  			UPDATE ZEB_RESEQUENCER_MESSAGE
403  			SET STATUS='0',
404  			LAST_UPDATED_TIME=TO_CHAR(LOCALTIMESTAMP AT TIME ZONE 'AMERICA/CHICAGO','YYYYMMDDHH24MISSFF3'),
405  			ERROR=NULL,
406  			FLOW_ID=P_FLOW_ID,
407  			LAST_UPDATED_BY=P_LAST_UPDATED_BY
408  			WHERE GROUP_ID=P_GRP_ID AND PROCESS_ID=P_PROCESS_ID
409  			and STATUS='3';
410
411  			UPDATE ZEB_RESEQUENCER_GROUP
412  			SET STATUS='N',
413  			LAST_UPDATED_TIME=TO_CHAR(LOCALTIMESTAMP AT TIME ZONE 'AMERICA/CHICAGO','YYYYMMDDHH24MISSFF3'),
414  			ERROR=NULL,
415  			FLOW_ID=P_FLOW_ID,
416  			LAST_UPDATED_BY=P_LAST_UPDATED_BY
417  			WHERE GROUP_ID=P_GRP_ID AND PROCESS_ID=P_PROCESS_ID;
418  			COMMIT;
419
420  			L_STATUS:='SUCCESS';
421  			L_MSG:='STATUS UPDATED IN ZEB_RESEQUENCER_MESSAGE/GROUP TABLE';
422  		ELSE
423  			L_STATUS:='FAILED';
424  			L_MSG:='INVALID OIC STATUS';
425  		END IF;
426  		END;
427  		END IF;
428
429  		SELECT PROCESS_STATUS INTO L_GRP_CONSUMER_STATUS FROM ZEB_RESEQ_CONTROL_TBL WHERE UPPER(PROCESS_NAME)='RESEQ GROUP CONSUMER';
430
431  			P_STATUS:=L_STATUS;
432  			P_MSG:=L_MSG;
433  			P_GRP_CONSUMER_STATUS:=L_GRP_CONSUMER_STATUS;
434  			P_OUT_VALUE:=NULL;
435  		EXCEPTION
436  				WHEN OTHERS THEN
437  				L_STATUS:='FAILED';
438  				L_MSG:='UNEXPECTED ERROR OCCURED: '||SQLERRM;
439  				P_STATUS:=L_STATUS;
440  				P_MSG:=L_MSG;
441  				P_GRP_CONSUMER_STATUS:=NULL;
442  				P_OUT_VALUE:=NULL;
443  	END ZBR_RESEQUENCER_UPDATE_STATUS;
444
445      PROCEDURE ZBR_RESEQUENCER_TABLE_PURGE(p_status out varchar2,P_MSG OUT VARCHAR2,p_purge_days in number default 90,p_limit in number default 100)
446  	 AS
447
448  		/*This procedure will delete the records from Group and Message Table. */
449
450      L_STATUS  varchar2(10);
451      L_MSG  varchar2(4000);
452      L_ID ZBR_RESEQUENCER_PKG_ID_LIST:=ZBR_RESEQUENCER_PKG_ID_LIST();
453      CURSOR L_PURGE_CURSOR(L_PURGE_DAYS NUMBER) IS SELECT OWNER_ID FROM ZEB_RESEQUENCER_MESSAGE
454          WHERE TO_DATE(SUBSTR(CREATED_DATE,1,8),'YYYYMMDD')<SYSDATE-L_PURGE_DAYS;
455      L_PURGE_CNT NUMBER:=0;
456
457      BEGIN
458
459          OPEN L_PURGE_CURSOR(p_purge_days);
460          LOOP
461          FETCH L_PURGE_CURSOR BULK COLLECT INTO L_ID LIMIT P_LIMIT;
462          EXIT WHEN L_ID.COUNT=0;
463          FORALL I IN L_ID.FIRST..L_ID.COUNT
464          DELETE FROM ZEB_RESEQUENCER_MESSAGE WHERE OWNER_ID=L_ID(I) AND STATUS IN('1','4');
465          FORALL I IN L_ID.FIRST..L_ID.COUNT
466          DELETE FROM ZEB_RESEQUENCER_GROUP WHERE ID=L_ID(I) AND STATUS='C';
467          COMMIT;
468          L_PURGE_CNT:=L_PURGE_CNT+L_ID.COUNT;
469          END LOOP;
470
471     L_STATUS := 'SUCCESS';
472     L_MSG:=L_PURGE_CNT||' RECORDS PURGED SUCCESSFULLY.';
473     P_STATUS:=L_STATUS;
474     P_MSG:=L_MSG;
475    EXCEPTION
476      WHEN OTHERS THEN
477          L_STATUS := 'FAILED';
478          L_MSG:='UNEXPECTED ERROR HAPPENED WHILE PURGING :'||SQLERRM;
479          P_STATUS:=L_STATUS;
480          P_MSG:=L_MSG;
481   END ZBR_RESEQUENCER_TABLE_PURGE;
482
483   PROCEDURE ZBR_RESEQENCER_VB_GET_GROUPS(P_GROUP_LIST OUT ZEB_RESEQUENCER_VB_GROUP_LIST,P_STATUS OUT VARCHAR2,P_MSG OUT VARCHAR2,
484  										P_ADDITIONAL_FILTER IN VARCHAR2 DEFAULT NULL)
485  AS
486  L_STATUS VARCHAR2(20);
487  L_MSG VARCHAR2(4000);
488  P_FILTER VARCHAR2(4000):=P_ADDITIONAL_FILTER;
489  L_STMT VARCHAR2(4000):=Q'[
490  WITH MESSAGE AS(
491  SELECT OWNER_ID,COUNT(ID) CNT FROM ZEB_RESEQUENCER_MESSAGE GROUP BY OWNER_ID)
492  SELECT
493  ZEB_RESEQUENCER_VB_GROUP_REC(ROWNUM         ,
494  G.ID                ,
495  G.COMPONENT_DN      ,
496  G.OPERATION         ,
497  G.GROUP_ID          ,
498  SUBSTR(G.GROUP_ID,1,INSTR(G.GROUP_ID,'-')-1)     ,
499  G.PROCESS_ID        ,
500  G.STATUS||':('||M.CNT||')'            ,
501  DECODE(G.STATUS,'P','LOCKED','E','ERROR')      ,
502  TO_CHAR(TO_TIMESTAMP(G.CREATED_DATE,'YYYYMMDDHH24MISSFF3'),'YYYY-MM-DD HH24:MI:SS.FF')      ,
503  TO_CHAR(TO_TIMESTAMP(G.LAST_UPDATED_TIME,'YYYYMMDDHH24MISSFF3'),'YYYY-MM-DD HH24:MI:SS.FF')  ,
504  G.ERROR             ,
505  G.FLOW_ID           ,
506  G.TP_NAME           ,
507  G.CREATED_BY     ,
508  G.LAST_UPDATED_BY ,
509  G.START_SEQUENCE_ID ,
510  G.LAST_SEQUENCE_ID  ,
511  G.NEXT_SEQUENCE_ID  ,
512  G.LAST_RECEIVED_TIME,
513  G.RESEQUENCER_TYPE  ,
514  G.CONTAINER_ID      ,
515  G.TIMEOUT_DURATION  ,
516  G.ATTRIBUTE1        ,
517  G.ATTRIBUTE2        ,
518  G.ATTRIBUTE3        ,
519  G.ATTRIBUTE4        ,
520  G.ATTRIBUTE5        ,
521  G.ATTRIBUTE6        ,
522  G.ATTRIBUTE7        ,
523  G.ATTRIBUTE8        ,
524  G.ATTRIBUTE9        ,
525  G.ATTRIBUTE10 )
526  FROM ZEB_RESEQUENCER_GROUP G INNER JOIN MESSAGE M
527  ON G.ID=M.OWNER_ID
528  WHERE STATUS IN('P','E') ]'||P_FILTER||' ORDER BY LAST_UPDATED_TIME';
529  BEGIN
530  EXECUTE IMMEDIATE L_STMT BULK COLLECT INTO P_GROUP_LIST;
531
532  L_STATUS:='SUCCESS';
533  L_MSG:='RECORDS RETURNED SUCCESSFULLY';
534  P_STATUS:=L_STATUS;
535  P_MSG:=L_MSG;
536
537  EXCEPTION
538  WHEN OTHERS THEN
539  L_STATUS:='FAILED';
540  L_MSG:='UNEXPECTED ERROR WHILE FETCHING RECORDS: '||SQLERRM;
541  P_STATUS:=L_STATUS;
542  P_MSG:=L_MSG;
543
544  END ZBR_RESEQENCER_VB_GET_GROUPS;
545
546   PROCEDURE ZBR_RESEQENCER_VB_GET_MESSAGE(P_IN_VALUE IN ZBR_RESEQUENCER_PKG_ATTRIBUTE_REC,P_MESSAGE_LIST OUT ZEB_RESEQUENCER_VB_MESSAGE_LIST,P_STATUS OUT VARCHAR2,P_MSG OUT VARCHAR2)
547  AS
548  L_STATUS VARCHAR2(20);
549  L_MSG VARCHAR2(4000);
550  BEGIN
551  SELECT
552  ZEB_RESEQUENCER_VB_MESSAGE_REC(
553  ROWNUM                 ,
554  ID                     ,
555  OWNER_ID               ,
556  COMPONENT_DN           ,
557  GROUP_ID               ,
558  SOURCE_URI             ,
559  PROCESS_ID             ,
560  STATUS                 ,
561  DECODE(STATUS,'0','READY','1','PROCESSED','2','LOCKED','3','ERROR','4','ABORT')           ,
562  TO_CHAR(TO_TIMESTAMP(CREATED_DATE,'YYYYMMDDHH24MISSFF3'),'YYYY-MM-DD HH24:MI:SS.FF')      ,
563  TO_CHAR(TO_TIMESTAMP(LAST_UPDATED_TIME,'YYYYMMDDHH24MISSFF3'),'YYYY-MM-DD HH24:MI:SS.FF')  ,
564  ERROR                  ,
565  OPERATION              ,
566  LEVEL_DETAIL2          ,
567  NAME                   ,
568  TYPE                   ,
569  BIN                    ,
570  SEQUENCE_ID            ,
571  STANDARD_SEQUENCE_ID   ,
572  INSTANCE_CREATED       ,
573  TENANT_ID              ,
574  FLOW_ID                ,
575  CONTAINER_ID           ,
576  CREATED_BY             ,
577  LAST_UPDATED_BY        ,
578  START_SEQUENCE_ID      ,
579  LAST_SEQUENCE_ID       ,
580  NEXT_SEQUENCE_ID       ,
581  TP_NAME                ,
582  TO_CHAR(TO_TIMESTAMP(PICKED_DATE_TIME,'YYYYMMDDHH24MISSFF3'),'YYYY-MM-DD HH24:MI:SS.FF') ,
583  ATTRIBUTE1             ,
584  ATTRIBUTE2             ,
585  ATTRIBUTE3             ,
586  ATTRIBUTE4             ,
587  ATTRIBUTE5             ,
588  ATTRIBUTE6             ,
589  ATTRIBUTE7             ,
590  ATTRIBUTE8             ,
591  ATTRIBUTE9             ,
592  ATTRIBUTE10 )
593  BULK COLLECT INTO P_MESSAGE_LIST
594  FROM ZEB_RESEQUENCER_MESSAGE
595  WHERE GROUP_ID=P_IN_VALUE.ATTRIBUTE1 AND PROCESS_ID=P_IN_VALUE.ATTRIBUTE2 AND STATUS IN ('0','2','3')
596  ORDER BY CREATED_DATE;
597
598  L_STATUS:='SUCCESS';
599  L_MSG:='RECORDS RETURNED SUCCESSFULLY';
600  P_STATUS:=L_STATUS;
601  P_MSG:=L_MSG;
602
603  EXCEPTION
604  WHEN OTHERS THEN
605  L_STATUS:='FAILED';
606  L_MSG:='UNEXPECTED ERROR WHILE FETCHING RECORDS: '||SQLERRM;
607  P_STATUS:=L_STATUS;
608  P_MSG:=L_MSG;
609
610  END ZBR_RESEQENCER_VB_GET_MESSAGE;
611
612  PROCEDURE ZBR_RESEQUENCER_UPDATE_STATUS_JAVA(P_GRP_ID IN VARCHAR2,P_PROCESS_ID IN VARCHAR2,P_ID IN NUMBER,P_ERROR IN VARCHAR2
613  	,P_OIC_STATUS IN VARCHAR2,P_LAST_UPDATED_BY IN VARCHAR2,P_FLOW_ID IN VARCHAR2, P_TAB_NAME IN VARCHAR2 DEFAULT NULL,
614  	P_PENDING_MSG_CNT OUT NUMBER ,P_STATUS OUT VARCHAR2,P_MSG OUT VARCHAR2,P_GRP_CONSUMER_STATUS OUT VARCHAR2) AS
615
616  	/*This procedure will be called From JAVA program to Resubmit and Abort the message. */
617  		L_STATUS VARCHAR2(15);
618  		L_MSG VARCHAR2(2000);
619  		L_OUT_VALUE ZBR_RESEQUENCER_PKG_ATTRIBUTE_LIST:=ZBR_RESEQUENCER_PKG_ATTRIBUTE_LIST();
620  		BEGIN
621  			ZBR_RESEQUENCER_UPDATE_STATUS(P_GRP_ID,P_PROCESS_ID ,P_ID ,P_ERROR ,P_OIC_STATUS,P_LAST_UPDATED_BY,P_FLOW_ID,NULL, P_TAB_NAME,
622  			P_PENDING_MSG_CNT,P_STATUS,P_MSG,P_GRP_CONSUMER_STATUS,L_OUT_VALUE);
623  		EXCEPTION
624  				WHEN OTHERS THEN
625  				L_STATUS:='FAILED';
626  				L_MSG:='UNEXPECTED ERROR OCCURED: '||SQLERRM;
627  				P_STATUS:=L_STATUS;
628  				P_MSG:=L_MSG;
629  				P_GRP_CONSUMER_STATUS:=NULL;
630  END ZBR_RESEQUENCER_UPDATE_STATUS_JAVA;
631
632  PROCEDURE ZBR_RESEQUENCER_UPDATE_STATUS_VB(P_ACTION IN VARCHAR2,P_RESUBMIT_CNT IN NUMBER DEFAULT 10,P_STATUS_VBCS IN VARCHAR2 DEFAULT '7',
633  	P_COMPONENT_DN VARCHAR2,P_GRP_LIST VARCHAR2,P_GROUP_LIST_VB OUT ZEB_RESEQUENCER_VB_GROUP_LIST,P_STATUS OUT VARCHAR2,P_MSG OUT VARCHAR2,
634  	P_GRP_CONSUMER_STATUS OUT VARCHAR2,P_ADDITIONAL_FILTER IN VARCHAR2 DEFAULT NULL) AS
635
636  		CURSOR L_CURSOR (L_CNT NUMBER) IS WITH GRP AS(
637  			SELECT * FROM(SELECT ID,GROUP_ID,PROCESS_ID,CREATED_DATE FROM ZEB_RESEQUENCER_GROUP WHERE STATUS IN('P','E') ORDER BY CREATED_DATE DESC)
638  			WHERE ROWNUM<=L_CNT)
639  			SELECT G.ID GRP_UID,G.GROUP_ID,G.PROCESS_ID,G.CREATED_DATE,M.ID MSG_UID
640  			FROM GRP G INNER JOIN ZEB_RESEQUENCER_MESSAGE M ON G.ID=M.OWNER_ID;
641  		TYPE CUR_REC IS TABLE OF L_CURSOR%ROWTYPE;
642  		L_REC CUR_REC;
643  		L_CURSOR_SELECTIVE SYS_REFCURSOR;
644  		L_STATUS VARCHAR2(15);
645  		L_MSG VARCHAR2(2000);
646  		L_GRP_CONSUMER_STATUS VARCHAR2(100);
647  		L_PENDING_MSG_CNT NUMBER;
648  		L_OUT_VALUE ZBR_RESEQUENCER_PKG_ATTRIBUTE_LIST:=ZBR_RESEQUENCER_PKG_ATTRIBUTE_LIST();
649  		BEGIN
650
651  			IF UPPER(P_ACTION)='DISPLAY ALL' THEN
652  				IF P_ADDITIONAL_FILTER IS NOT NULL THEN
653  				ZBR_RESEQUENCER_PKG.ZBR_RESEQENCER_VB_GET_GROUPS(P_GROUP_LIST_VB,L_STATUS,L_MSG,P_ADDITIONAL_FILTER);
654  				P_STATUS:=L_STATUS;
655  				P_MSG:=L_MSG;
656  				ELSE
657  				ZBR_RESEQUENCER_PKG.ZBR_RESEQENCER_VB_GET_GROUPS(P_GROUP_LIST_VB,L_STATUS,L_MSG);
658  				P_STATUS:=L_STATUS;
659  				P_MSG:=L_MSG;
660  				END IF;
661
662  			ELSIF UPPER(P_ACTION)='RESUBMIT ALL' THEN
663  				OPEN L_CURSOR(P_RESUBMIT_CNT);
664  				IF L_CURSOR%ROWCOUNT=0
665  				THEN L_STATUS:='SUCCESS';
666  					 L_MSG:='NO DATA AVAILABLE..';
667  				END IF;
668  				LOOP
669  				FETCH L_CURSOR BULK COLLECT INTO L_REC LIMIT 1000;
670  				EXIT WHEN L_REC.COUNT=0;
671  					FOR I  IN L_REC.FIRST..L_REC.LAST LOOP
672  					ZBR_RESEQUENCER_PKG.ZBR_RESEQUENCER_UPDATE_STATUS(P_GRP_ID=>L_REC(I).GROUP_ID,P_PROCESS_ID=>L_REC(I).PROCESS_ID,P_ID=>L_REC(I).MSG_UID,
673  					P_ERROR=>NULL,P_OIC_STATUS=>P_STATUS_VBCS,P_LAST_UPDATED_BY=>USER,P_FLOW_ID=>NULL,P_STATUS=>L_STATUS,P_MSG=>L_MSG,P_IN_VALUE=>NULL,
674  					P_PENDING_MSG_CNT=>L_PENDING_MSG_CNT,P_OUT_VALUE=>L_OUT_VALUE,P_GRP_CONSUMER_STATUS=>L_GRP_CONSUMER_STATUS);
675  					END LOOP;
676  				END LOOP;
677
678  			P_STATUS:=L_STATUS;
679  			P_MSG:=L_MSG;
680  			P_GRP_CONSUMER_STATUS:=L_GRP_CONSUMER_STATUS;
681
682  			ELSIF UPPER(P_ACTION)='RESUBMIT SELECTIVE' THEN
683  				OPEN L_CURSOR_SELECTIVE FOR WITH DATA AS(SELECT REGEXP_SUBSTR(P_GRP_LIST,'[^,]+',1,LEVEL) GROUPS FROM DUAL
684  					CONNECT BY REGEXP_SUBSTR(P_GRP_LIST,'[^,]+',1,LEVEL) IS NOT NULL)
685  					SELECT  G.ID GRP_UID,G.GROUP_ID,G.PROCESS_ID,G.CREATED_DATE,M.ID MSG_UID FROM
686  					(SELECT ID,GROUP_ID,PROCESS_ID,CREATED_DATE FROM ZEB_RESEQUENCER_GROUP
687  					WHERE STATUS IN ('P','E')
688  					AND GROUP_ID IN(SELECT GROUPS FROM DATA)
689  					AND (1=(CASE WHEN P_COMPONENT_DN IS NULL THEN 1 ELSE 0 END ) OR COMPONENT_DN=P_COMPONENT_DN)) G
690  					INNER JOIN ZEB_RESEQUENCER_MESSAGE M ON G.ID=M.OWNER_ID;
691  				LOOP
692  				FETCH L_CURSOR_SELECTIVE BULK COLLECT INTO L_REC LIMIT 1000;
693  				EXIT WHEN L_REC.COUNT=0;
694  					FOR I  IN L_REC.FIRST..L_REC.LAST
695  					LOOP
696  					ZBR_RESEQUENCER_PKG.ZBR_RESEQUENCER_UPDATE_STATUS(P_GRP_ID=>L_REC(I).GROUP_ID,P_PROCESS_ID=>L_REC(I).PROCESS_ID,P_ID=>L_REC(I).MSG_UID,
697  					P_ERROR=>NULL,P_OIC_STATUS=>P_STATUS_VBCS,P_LAST_UPDATED_BY=>USER,P_FLOW_ID=>NULL,P_STATUS=>L_STATUS,P_MSG=>L_MSG,P_IN_VALUE=>NULL,
698  					P_PENDING_MSG_CNT=>L_PENDING_MSG_CNT,P_OUT_VALUE=>L_OUT_VALUE,P_GRP_CONSUMER_STATUS=>L_GRP_CONSUMER_STATUS);
699  					END LOOP;
700  				END LOOP;
701
702  			P_STATUS:=L_STATUS;
703  			P_MSG:=L_MSG;
704  			P_GRP_CONSUMER_STATUS:=L_GRP_CONSUMER_STATUS;
705
706  			ELSIF UPPER(P_ACTION)='SEARCH' THEN
707  				BEGIN
708  				WITH MESSAGE AS(SELECT OWNER_ID,COUNT(ID) CNT FROM ZEB_RESEQUENCER_MESSAGE GROUP BY OWNER_ID)
709  				SELECT
710  				ZEB_RESEQUENCER_VB_GROUP_REC(ROWNUM         ,
711  				G.ID                ,
712  				G.COMPONENT_DN      ,
713  				G.OPERATION         ,
714  				G.GROUP_ID          ,
715  				SUBSTR(G.GROUP_ID,1,INSTR(G.GROUP_ID,'-')-1)     ,
716  				G.PROCESS_ID        ,
717  				G.STATUS||':('||M.CNT||')'            ,
718  				DECODE(G.STATUS,'P','LOCKED','E','ERROR')      ,
719  				TO_CHAR(TO_TIMESTAMP(G.CREATED_DATE,'YYYYMMDDHH24MISSFF3'),'YYYY-MM-DD HH24:MI:SS.FF')      ,
720  				TO_CHAR(TO_TIMESTAMP(G.LAST_UPDATED_TIME,'YYYYMMDDHH24MISSFF3'),'YYYY-MM-DD HH24:MI:SS.FF')  ,
721  				G.ERROR             ,
722  				G.FLOW_ID           ,
723  				G.TP_NAME           ,
724  				G.CREATED_BY     ,
725  				G.LAST_UPDATED_BY ,
726  				G.START_SEQUENCE_ID ,
727  				G.LAST_SEQUENCE_ID  ,
728  				G.NEXT_SEQUENCE_ID  ,
729  				G.LAST_RECEIVED_TIME,
730  				G.RESEQUENCER_TYPE  ,
731  				G.CONTAINER_ID      ,
732  				G.TIMEOUT_DURATION  ,
733  				G.ATTRIBUTE1        ,
734  				G.ATTRIBUTE2        ,
735  				G.ATTRIBUTE3        ,
736  				G.ATTRIBUTE4        ,
737  				G.ATTRIBUTE5        ,
738  				G.ATTRIBUTE6        ,
739  				G.ATTRIBUTE7        ,
740  				G.ATTRIBUTE8        ,
741  				G.ATTRIBUTE9        ,
742  				G.ATTRIBUTE10  )
743  				BULK COLLECT INTO P_GROUP_LIST_VB
744  				FROM ZEB_RESEQUENCER_GROUP G INNER JOIN MESSAGE M
745  				ON G.ID=M.OWNER_ID
746  				WHERE
747  				G.GROUP_ID IN (SELECT REGEXP_SUBSTR(P_GRP_LIST,'[^,]+',1,LEVEL) GROUPS FROM DUAL
748  								CONNECT BY REGEXP_SUBSTR(P_GRP_LIST,'[^,]+',1,LEVEL) IS NOT NULL)
749  				AND G.STATUS IN ('P','E')
750  				ORDER BY LAST_UPDATED_TIME desc;
751
752  					L_STATUS:='SUCCESS';
753  					L_MSG:=SQL%ROWCOUNT||' Rows fetched..';
754  					P_STATUS:=L_STATUS;
755  					P_MSG:=L_MSG;
756  					P_GRP_CONSUMER_STATUS:=NULL;
757  				EXCEPTION
758  					WHEN OTHERS THEN
759  					L_STATUS:='FAILED';
760  					L_MSG:='UNEXPECTED ERROR OCCURED: '||SQLERRM;
761  					P_STATUS:=L_STATUS;
762  					P_MSG:=L_MSG;
763  					P_GRP_CONSUMER_STATUS:=NULL;
764  				END;
765  			ELSE
766  				L_STATUS:='FAILED';
767  				L_MSG:='INVALID ACTION..';
768  				P_STATUS:=L_STATUS;
769  				P_MSG:=L_MSG;
770  				P_GRP_CONSUMER_STATUS:=NULL;
771  			END IF;
772  		EXCEPTION
773  				WHEN OTHERS THEN
774  				L_STATUS:='FAILED';
775  				L_MSG:='UNEXPECTED ERROR OCCURED: '||SQLERRM;
776  				P_STATUS:=L_STATUS;
777  				P_MSG:=L_MSG;
778  				P_GRP_CONSUMER_STATUS:=NULL;
779  	END ZBR_RESEQUENCER_UPDATE_STATUS_VB;
780
781  	PROCEDURE ZBR_RESEQENCER_VB_GET_PAYLOAD(P_IN_VALUE IN ZBR_RESEQUENCER_PKG_ATTRIBUTE_REC,P_MESSAGE_LIST OUT ZBR_RESEQUENCER_PKG_GET_MSG_LIST,
782  										P_STATUS OUT VARCHAR2,P_MSG OUT VARCHAR2)
783  	AS
784  	L_STATUS VARCHAR2(20);
785  	L_MSG VARCHAR2(4000);
786  	BEGIN
787  		SELECT  ZBR_RESEQUENCER_PKG_GET_MSG_REC(BIN,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL) BULK COLLECT INTO P_MESSAGE_LIST
788  		FROM ZEB_RESEQUENCER_MESSAGE
789  		WHERE ID=P_IN_VALUE.ATTRIBUTE1
790  		AND GROUP_ID=P_IN_VALUE.ATTRIBUTE2
791  		AND PROCESS_ID=P_IN_VALUE.ATTRIBUTE3;
792
793  		L_STATUS:='SUCCESS';
794  		L_MSG:='PAYLOAD RETURNED SUCCESSFULLY..';
795  		P_STATUS:=L_STATUS;
796  		P_MSG:=L_MSG;
797
798  	EXCEPTION
799  		WHEN OTHERS THEN
800  		L_STATUS:='FAILED';
801  		L_MSG:='Unexpected Error Occured: '||SQLERRM;
802  		P_STATUS:=L_STATUS;
803  		P_MSG:=L_MSG;
804  	END ZBR_RESEQENCER_VB_GET_PAYLOAD;
805
806  	PROCEDURE ZBR_RESEQENCER_VB_GET_CONTROL_TP_TBL(P_CONTROL_TBL OUT ZBR_RESEQUENCER_PKG_CONTROL_TBL_LIST,P_TP_TBL IN OUT ZBR_RESEQUENCER_PKG_TP_METADATA_LIST,
807  										P_STATUS OUT VARCHAR2,P_MSG OUT VARCHAR2,P_ACTION IN VARCHAR2 DEFAULT NULL)
808  	AS
809  	L_STATUS VARCHAR2(20);
810  	L_MSG VARCHAR2(4000);
811  	BEGIN
812
813  	IF P_ACTION IS NULL THEN
814  	BEGIN
815  		SELECT ZBR_RESEQUENCER_PKG_CONTROL_TBL_REC(PROCESS_ID,PROCESS_NAME,PROCESS_STATUS,CREATED_BY,CREATED_DATE,LAST_UPDATED_DATE)
816  		BULK COLLECT INTO P_CONTROL_TBL
817  		FROM  ZEB_RESEQ_CONTROL_TBL;
818
819  		SELECT ZBR_RESEQUENCER_PKG_TP_METADATA_REC(ID,TP_ID,TP_NAME,COUNT,PROCESS_NAME,ACTIVE,TP_TIMEZONE,ATTRIBUTE1,ATTRIBUTE2,ATTRIBUTE3,ATTRIBUTE4,
820  		ATTRIBUTE5,ATTRIBUTE6,ATTRIBUTE7,ATTRIBUTE8,ATTRIBUTE9,ATTRIBUTE10)
821  		BULK COLLECT INTO P_TP_TBL
822  		FROM ZEB_RESEQUENCER_TP_METADATA;
823
824  		L_STATUS:='SUCCESS';
825  		L_MSG:='RECORDS RETURNED SUCCESSFULLY..';
826  		P_STATUS:=L_STATUS;
827  		P_MSG:=L_MSG;
828
829  	EXCEPTION
830  		WHEN OTHERS THEN
831  		L_STATUS:='FAILED';
832  		L_MSG:='Unexpected Error Occured while fetching: '||SQLERRM;
833  		P_STATUS:=L_STATUS;
834  		P_MSG:=L_MSG;
835  	END;
836
837  	ELSE
838  		BEGIN
839
840  			FORALL I IN P_TP_TBL.FIRST..P_TP_TBL.LAST
841  			MERGE INTO ZEB_RESEQUENCER_TP_METADATA TP
842  			USING DUAL
843  			ON (TP.TP_ID=P_TP_TBL(I).TP_ID)
844  			WHEN MATCHED THEN
845  			UPDATE SET
846  			TP.TP_NAME=P_TP_TBL(I).TP_NAME,
847  			TP.COUNT=P_TP_TBL(I).COUNT,
848  			TP.PROCESS_NAME=P_TP_TBL(I).PROCESS_NAME,
849  			TP.ACTIVE=P_TP_TBL(I).ACTIVE,
850  			TP.TP_TIMEZONE=P_TP_TBL(I).TP_TIMEZONE
851  			WHEN NOT MATCHED THEN
852  			INSERT(TP.TP_ID,TP.TP_NAME,TP.COUNT,TP.PROCESS_NAME,TP.ACTIVE,TP.TP_TIMEZONE)
853  			VALUES(P_TP_TBL(I).TP_ID,P_TP_TBL(I).TP_NAME,P_TP_TBL(I).COUNT,P_TP_TBL(I).PROCESS_NAME,P_TP_TBL(I).ACTIVE,P_TP_TBL(I).TP_TIMEZONE);
854
855  		COMMIT;
856
857  			L_STATUS:='SUCCESS';
858  			L_MSG:='RECORDS MERGED SUCCESSFULLY..';
859  			P_STATUS:=L_STATUS;
860  			P_MSG:=L_MSG;
861
862  		EXCEPTION
863  			WHEN OTHERS THEN
864  			L_STATUS:='FAILED';
865  			L_MSG:='Unexpected Error Occured while merging: '||SQLERRM;
866  			P_STATUS:=L_STATUS;
867  			P_MSG:=L_MSG;
868
869  		END;
870
871  	END IF;
872  	END ZBR_RESEQENCER_VB_GET_CONTROL_TP_TBL;
873
874  END ZBR_RESEQUENCER_PKG;

Package Body ZBR_RESEQUENCER_PKG compiled

Elapsed: 00:00:00.302
SQL> show error;
SQL>
SQL> Spool off;
